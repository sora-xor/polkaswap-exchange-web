{
    "acceptOnScrollText": "Scroll to accept",
    "acceptText": "Accept & Hide",
    "account": {
        "accountTitle": "Account",
        "copy": "Copy address",
        "delete": "Delete account",
        "export": "Export .json",
        "rename": "Rename account",
        "switch": "Switch account",
        "walletAddress": "Wallet address"
    },
    "accountAddressText": "Account address",
    "accountSettings": {
        "confirmation": {
            "description": "A popup screen which displays details about the transactions before the signing.",
            "title": "Disable transaction confirmation"
        },
        "disable": "Disable on",
        "disabled": "Disabled for",
        "enterPassword": "Enter password",
        "googleOnly": "{Google} accounts only",
        "hint": "You can enable this back in account settings",
        "signature": {
            "description": "Enable or disable the need to enter your password during the signature popup in transactions.",
            "title": "Disable password confirmation"
        },
        "title": "Account settings"
    },
    "accountText": "account | accounts",
    "addAsset": {
        "add": "Add",
        "AddAssetToken": {
            "switchBtn": "Verified assets only",
            "title": "Currencies"
        },
        "alreadyAttached": "Token was already attached",
        "approved": "Asset approved by community",
        "assetType": {
            "nft": "NFT | NFTs",
            "token": "token | tokens"
        },
        "empty": "No tokens found",
        "pinAsset": "Pin Asset",
        "scam": "SCAM",
        "searchInputText": "Search by Asset ID, Name or Ticker Symbol",
        "success": "Asset {symbol} was added successfully!",
        "understand": "I understand",
        "unknown": "Unknown source",
        "unpinAsset": "Unpin Asset",
        "warningMessage": "this {assetType} | these {assetTypePlural}",
        "warningMessageText": "Anyone can create a {assetType}, including creating fake versions of existing {assetTypePlural} that claim to represent projects.\nIf you purchase {purchaseAssetType}, you may not be able to sell it back.",
        "warningTitle": "Trade at your own risk!"
    },
    "addAssetsText": "Add asset | Add assets",
    "addAssetText": "Add asset",
    "addLiquidity": {
        "title": "Add liquidity"
    },
    "addressBook": {
        "addContact": "Add contact",
        "btn": {
            "enterName": "Enter name",
            "present": "Already present",
            "saveChanges": "Save changes"
        },
        "detected": "New address detected",
        "dialogTitle": "Your contacts",
        "identity": "On-chain identity",
        "input": "Input address or select contact",
        "myAccounts": "My accounts",
        "myBook": "My Book",
        "noContacts": "You don’t have any contacts added yet",
        "noFoundRecords": "No records found",
        "none": "None",
        "notSoraAddress": "This address will be saved as {Sora} address below. Make sure the recipient can access the {Sora} chain:",
        "options": {
            "delete": "Delete",
            "edit": "Edit contact",
            "send": "Send tokens"
        },
        "save": "Save as contact",
        "searchPlaceholder": "Search by address, name or identity",
        "selectContact": "Select contact",
        "tooltip": "Collect address book by providing name and address to keep your contacts organized and up-to-date"
    },
    "addressText": "Address",
    "alerts": {
        "alertFrequencyTitle": "Alert frequency",
        "alertsCreateTitle": "Set up price alert",
        "alertsTitle": "Alerts",
        "alertsTooltip": "Price alerts are notifications that can be set by you to receive updates when the price of a particular token reaches certain point you set",
        "alertTypeTitle": "Alert type",
        "always": "Always",
        "createBtn": "Create new price alert",
        "currentPrice": "current price",
        "delete": "Delete alert",
        "drop": "Drops below",
        "edit": "Edit alert",
        "enableSwitch": "Enable asset deposit notifications",
        "finishBtn": "Finish alert setup",
        "frequencyTooltip": "Select between 'once' and 'always' to determine how often you receive notifications for the chosen alert type. 'Once' will send a single notification when the condition is met, while 'always' will continue to notify you each time the price threshold is crossed",
        "noSupportMsg": "Notifications aren't supported by your browser",
        "once": "Once",
        "onDropDesc": "{token} drops below {price}",
        "onRaiseDesc": "{token} rises above {price}",
        "raise": "Rises above",
        "typeTooltip": "Choose either 'drops below' or 'rises above' option to specify alert condition for tracking important price movements. These options allow you receive timely notifications when the value of your asset either falls below or rises above your designated threshold"
    },
    "amountText": "Amount",
    "appName": "{AppName}",
    "asset": {
        "receive": "Receive {symbol}",
        "remove": "Remove asset",
        "select": "Select an asset"
    },
    "assetDeposit": "Asset balance has been deposited",
    "assets": {
        "assetId": "Asset ID",
        "balance": {
            "bonded": "Bonded",
            "frozen": "Frozen",
            "locked": "Locked",
            "reserved": "Reserved",
            "total": "Total",
            "transferable": "Transferable"
        },
        "bridge": "Bridge",
        "copied": "Copied!",
        "copy": "Copy Asset ID",
        "details": "Details",
        "empty": "There are no assets",
        "liquidity": "Add liquidity",
        "receive": "@:account.copy",
        "send": "@:sendText",
        "swap": "@:swapText",
        "totalAssetsValue": "Total assets value:"
    },
    "backText": "Back",
    "balanceText": "Balance",
    "blockNumberText": "Block number",
    "bridge": {
        "balance": "Balance",
        "connectWallets": "Connect wallets to view respective transaction history.",
        "copy": "Copy network address",
        "ethereumAddress": "{Ethereum} address",
        "ethereumNetworkFee": "{Ethereum} Network Fee",
        "externalMinDeposit": "{network} min. deposit",
        "externalMinDepositTooltip": "Minimum balance {symbol} that must be on your {network} account after the bridge transfer",
        "externalTransferFee": "{network} {XCM} fee",
        "externalTransferFeeTooltip": "When you send a bridge transaction to the {network} network, a minor fee is taken from the amount you are transferring",
        "info": "Convert tokens between the {Sora} and {Ethereum} networks.",
        "limitMessage": "Currently, there's a {type} {amount} {symbol} for bridging to ensure the stability and security of the {Sora} Network. We appreciate your understanding.",
        "networkInfo": "Bridge {Sora} Network with:",
        "next": "Next",
        "notRegisteredAsset": "Asset {assetSymbol} is not registered",
        "selectNetwork": "Select network",
        "soraAddress": "{Sora} address",
        "soraNetworkFee": "{Sora} Network Fee",
        "title": "Bridge",
        "total": "Total",
        "transactionMessage": "{assetA} for {assetB}",
        "transactionSubmitted": "Transaction submitted",
        "viewHistory": "View transactions history"
    },
    "bridgeHistory": {
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here.",
        "filterPlaceholder": "Filter by Asset ID or Ticker Symbol",
        "restoreHistory": "Restore history",
        "showHistory": "Show history",
        "statusAction": "Action Needed",
        "title": "History"
    },
    "bridgeText": "Bridge",
    "bridgeTransaction": {
        "allowToken": "Allow {AppName} to use your {tokenSymbol}",
        "approveToken": "Please note that it is only needed to approve the token once. If your extension has multiple token approval requests, make sure to only confirm the last one while rejecting the rest.",
        "blocksLeft": "{count} blocks left...",
        "details": "{from} for {to}",
        "ethereum": "{Ethereum}",
        "for": " for ",
        "networkInfo": {
            "amount": "Amount",
            "date": "Date",
            "status": "Status",
            "total": "Total",
            "transactionFee": "Transaction Fee"
        },
        "networkTitle": "{network} transaction",
        "newTransaction": "Create new transaction",
        "pending": "{network} transaction pending...",
        "sora": "{Sora}",
        "status": {
            "complete": "Complete",
            "confirm": "Confirm 2nd of 2 transactions...",
            "convertionComplete": "Conversion complete",
            "failed": "{step} transactions failed. @:(retryText).",
            "pending": "{step} transactions pending..."
        },
        "statuses": {
            "done": "Complete",
            "failed": "Transaction failed",
            "frozen": "Frozen",
            "pending": "Pending",
            "ready": "Ready",
            "waiting": "Waiting",
            "waitingForConfirmation": "Waiting for confirmation..."
        },
        "steps": {
            "step": "{step} of 2",
            "step1": "1st",
            "step2": "2nd"
        },
        "title": "Bridge Transaction",
        "transactionHash": "Transaction hash"
    },
    "bridgeTransferNotification": {
        "addToken": "Add {symbol} to wallet",
        "title": "Bridge transaction successful"
    },
    "browserNotificationDialog": {
        "agree": "Yes, I understand",
        "button": "Enable notifications",
        "info": "We will send you only relevant updates about your wallet, for example: asset balance changes",
        "notificationBlocked": "To receive the notifications about {AppName}, please, allow the notifications in your browser's native settings",
        "pointer": "Press “Allow” to turn notifications on",
        "rotateMessage": "The experience is only available in portrait mode",
        "rotatetitle": "Please, rotate your device",
        "title": "Set Notifications"
    },
    "browserNotificationLocalStorageOverride": {
        "agree": "Yes, I understand",
        "info": "Your local storage is overloaded, to continue work with {AppName} need to clean it",
        "title": "Clear local {AppName} storage"
    },
    "browserPermission": {
        "btnAllow": "Allow access",
        "btnGoToSettings": "Go to settings",
        "desc": "To ensure the authenticity of documents and validate user identity for KYC verification, access to your device's camera is required.",
        "disclaimer": "Camera access is required for real-time document capture to prevent fraud.",
        "title": "Allow camera access in browser settings"
    },
    "buttons": {
        "chooseAToken": "Choose a token",
        "chooseToken": "Choose token",
        "chooseTokens": "Choose tokens",
        "enterAmount": "Enter amount",
        "max": "MAX"
    },
    "calculatingText": "Calculating",
    "cancelText": "Cancel",
    "changeAccountText": "Change account",
    "changeNetworkText": "Change network in wallet",
    "closeText": "Close",
    "code": {
        "allowanceError": "Check your camera availability and browser permissions to use it",
        "allowanceRequest": "Press “Allow” to access camera",
        "camera": "Camera",
        "download": "Download QR Code",
        "import": "Import an image",
        "invalid": "Invalid QR Code",
        "receive": "Receive",
        "scan": "Scan with camera",
        "upload": "Scan QR"
    },
    "collapseText": "Collapse",
    "comingSoonText": "Coming Soon",
    "confirmNextTxFailure": {
        "button": "Yes, I understand the risk",
        "header": "Attention",
        "info": "Your {symbol} balance will be less than {fee} {symbol} after this transaction. You won’t be able to pay for the network fee for another transaction.",
        "payoff": "You would have to use the Bridge to get XOR from other networks, get sent XOR from another {Sora} account, or swap any other token already in your account into XOR."
    },
    "confirmSupply": {
        "outputDescription": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "poolTokensBurned": "{first}-{second} Pool Tokens Burned",
        "price": "Price",
        "title": "Your pool share will be"
    },
    "confirmText": "Confirm",
    "confirmTransactionText": "Confirm transaction",
    "connectedAccount": "Connected account",
    "connectedText": "Connected",
    "connectEthereumWalletText": "Connect {Ethereum} wallet",
    "connection": {
        "action": {
            "learnMore": "Learn more about wallet connection",
            "refresh": "Refresh"
        },
        "disclaimer": "Please note that certain wallets may not be fully supported.",
        "internalText": "You can create or import an existing {Sora} account to connect with your {wallet} account. All data that is stored by {wallet} is encrypted using built-in advanced encryption.",
        "internalTitle": "Connect with {wallet}",
        "list": {
            "extensions": "Extensions",
            "integrated": "Integrated"
        },
        "selectAccount": "Select account to work with",
        "wallet": {
            "connected": "Connected",
            "install": "Install",
            "recommended": "Recommended"
        }
    },
    "connectWalletText": "Connect account",
    "connectWalletTextTooltip": "Connect to {Sora} Network with {PolkadotJs}",
    "continueText": "Continue",
    "copiedText": "Copied!",
    "copiedWithValue": "{value} is copied!",
    "copyPhraseText": "Copy Passphrase",
    "copyWithValue": "Copy {value}",
    "createPair": {
        "add": "ADD",
        "alreadyCreated": "Token pair is already created",
        "balance": "Balance",
        "connect": "Connect wallet",
        "deposit": "Deposit",
        "firstLiquidityProvider": "You are the first liquidity provider",
        "firstLiquidityProviderInfo": "The ratio of tokens you add will set the price of this pool.<br/>Once you are happy with the rate click supply to review.",
        "firstSecondPoolTokens": "{first}-{second} Pool",
        "ok": "OK",
        "pricePool": "Prices and fees",
        "remove": "remove",
        "shareOfPool": "Share of pool",
        "supply": "Supply",
        "title": "Create a pair",
        "yourPosition": "Your position",
        "yourPositionEstimated": "Your position (estimated)",
        "youWillReceive": "You will receive"
    },
    "createToken": {
        "confirmTokenTitleCommon": "Create Token",
        "confirmTokenTitleNFT": "Create NFT",
        "CreateSimpleToken": "Token",
        "divisible": {
            "desc": "Ability of NFT to divide into fractional parts. Liquidity provisioning only works with divisible assets",
            "placeholder": "Divisible"
        },
        "enterName": "Enter token name",
        "enterSupply": "Enter token supply",
        "enterSymbol": "Enter token symbol",
        "enterTokenDescription": "Enter description",
        "error": "Failed to create {symbol} token",
        "extensibleSupply": {
            "desc": "Ability to mint more tokens.",
            "placeholder": "Extensible supply"
        },
        "nft": {
            "description": {
                "placeholder": "Description"
            },
            "image": {
                "placeholderBadSource": "The file failed to be processed",
                "placeholderBadSourceAddition": "or it’s not uploaded to IPFS yet",
                "placeholderFileLimit": "The file size exceeds the limit of {value}mb",
                "placeholderNoImage": "Upload the file by either entering a link or choosing from local storage"
            },
            "link": {
                "copyLink": "Copy link",
                "placeholder": "IPFS link",
                "tooltip": "IPFS is a distributed system for storing and accessing files, making it possible to access files from many locations that aren't managed by one organization."
            },
            "source": {
                "label": "Source",
                "limit": "Choose another file",
                "value": "Local files"
            },
            "supply": {
                "desc": "Amount of NFTs you’re going to get.",
                "placeholder": "Token supply",
                "quantity": "Quantity"
            }
        },
        "provideContent": "Provide content",
        "success": {
            "desc": "Create {symbol} token",
            "title": "Transaction submitted"
        },
        "titleCommon": "Create",
        "tokenName": {
            "desc": "This is a name for the token. You can use from 1 to 33 characters for the selection.",
            "placeholder": "Token name"
        },
        "tokenSupply": {
            "desc": "You will receive these tokens upon creation.",
            "placeholder": "Token supply"
        },
        "tokenSymbol": {
            "desc": "This is an identifier for the token. You can use from 1 to 7 characters for the selection.",
            "placeholder": "Token symbol"
        }
    },
    "createTokenText": "Create",
    "createTokenTextNFT": "Create NFT",
    "currencyDialog": {
        "currency": "Currency",
        "searchPlaceholder": "Search by currency name or symbol"
    },
    "customisePageText": "Customize page",
    "dark": "Dark",
    "demeterFarming": {
        "actions": {
            "add": "Stake more",
            "claim": "Claim rewards",
            "remove": "Remove stake",
            "start": "Start staking"
        },
        "amountAdd": "Amount to stake",
        "amountRemove": "Amount to remove",
        "calculator": "Calculator",
        "info": {
            "earned": "{symbol} earned",
            "fee": "Fee",
            "feeTooltip": "Deposit fee is applied to your amount to stake",
            "owned": "{symbol} @:balanceText",
            "poolShare": "Your pool share staked",
            "poolShareWillBe": "Your pool share staked will be",
            "rewardToken": "Reward token",
            "stake": "Your {symbol} staked",
            "stakeWillBe": "Your {symbol} stake will be",
            "totalLiquidityLocked": "Total liquidity locked"
        },
        "poweredBy": "Powered by Demeter Farming",
        "results": "Results",
        "rewards": "{symbol} rewards",
        "staking": {
            "active": "Staking active",
            "inactive": "Stake to earn additional rewards",
            "stopped": "Staking stopped"
        }
    },
    "desktop": {
        "accountMnemonic": {
            "placeholder": "Mnemonic phrase"
        },
        "accountName": {
            "desc": "This is the name of your account. It will be visible only to you in {AppName}.",
            "placeholder": "Account name"
        },
        "addAccount": "Add an account",
        "assetsAtRiskText": "Assets at risk!",
        "button": {
            "createAccount": "Create Account",
            "importAccount": "Import account",
            "next": "Next step",
            "skip": "Skip"
        },
        "confirmPassword": {
            "placeholder": "Confirm password"
        },
        "confirmSeedText": "Confirm the passphrase by clicking the words in the correct order",
        "deleteAccountText": "Account can’t be recovered without a seed phrase, .json file or if it’s stored in some extension. You will be logged out.",
        "dialog": {
            "confirmButton": "Sign Transaction",
            "confirmTitle": "Confirm with password"
        },
        "errorMessages": {
            "alreadyImported": "Account already imported {address}",
            "jsonFields": "JSON file does not have required fields",
            "mnemonic": "Invalid bip39 mnemonic specified",
            "mnemonicLength": "Mnemonic should contain {number} words",
            "password": "Password did not match",
            "passwords": "Passwords did not match"
        },
        "errorMnemonicText": "Incorrect passphrase order",
        "exportJsonText": "You will always be able to restore your account by importing this {JSON} file. Do not share it with anyone! Store it safely, preferably encrypted.",
        "exportOptionText": "Export {JSON} file for account restoration",
        "exportTutorialsText": "Export tutorials",
        "heading": {
            "accountDetailsTitle": "Account Details",
            "confirmSeedTitle": "Confirm passphrase",
            "importTitle": "Import account",
            "seedPhraseTitle": "Passphrase"
        },
        "importSteps": {
            "exportAccount": "Export the {JSON} file",
            "selectAccount": "Select the account you want to export",
            "selectWallet": "Open the wallet with your existing account(s)"
        },
        "password": {
            "desc": "Ensure you are using a strong unique password for proper protection (8 characters minimum)",
            "placeholder": "Password"
        },
        "seedAdviceAdditionText": "If someone asks you for your passphrase they are most likely trying to scam you and steal your assets!",
        "seedAdviceAdditionTitle": "Never share your passphrase with anyone!",
        "seedAdviceText": "The 12-word passphrase is a private key to regain access to your {Sora} account in case you lose access to your {wallet} account. Store it safely in the exact order it appears above.",
        "welcome": {
            "createAccount": "Create an account",
            "header": "Welcome to {AppName}!",
            "headline": "Let’s set up your account",
            "importAccount": "Import Account",
            "text": "Create your {Sora} Network account or log into the old ones using mnemonic phrase or .json import. This allows you to securely sign transactions and manage assets in {Sora} Network."
        }
    },
    "dexSettings": {
        "custom": "CUSTOM",
        "ip": "IP",
        "marketAlgorithm": "@.upper:marketAlgorithmText",
        "marketAlgorithms": {
            "SMART": "{smartAlgorithm} liquidity routing ensures the best price for any transaction by combining only the best price options from all available markets. When available, Token Bonding Curve ({tbcAlgorithm}) will be used for liquidity as long as the asset price is more affordable than from other sources, upon which the {xycAlgorithm} pool is utilized.",
            "TBC": "{tbcAlgorithm} — buying only from the Token Bonding Curve (Primary Market). There is a possibility that the price can become unfavorable compared to the {xycAlgorithm} pool (Secondary Market), but the value received from the vested rewards might turn out to be much more favorable over time.",
            "XYK": "{xycAlgorithm} — buying only from the XYK Pool (Secondary Market). Traditional XYK pool swap."
        },
        "marketAlgorithmTooltip": {
            "main": " - option to choose between Primary Market (TBC), Secondary Market (XYK) or a combined smart algorithm for guaranteed best price for any given transaction."
        },
        "min": "MIN",
        "nodeAddress": "NODE ADDRESS",
        "port": "PORT",
        "slippageTolerance": "SLIPPAGE TOLERANCE",
        "slippageToleranceHint": "Your transaction will revert if the price changes unfavorably by more than this percentage.",
        "slippageToleranceValidation": {
            "error": "Enter a valid slippage percentage",
            "frontrun": "Your transaction may be frontrun",
            "warning": "Your transaction may fail"
        },
        "title": "Settings",
        "transactionDeadline": "TRANSACTION DEADLINE",
        "transactionDeadlineHint": "Transaction will be cancelled if it is pending for more than this long."
    },
    "disclaimer": "{disclaimerPrefix} This website is maintained by the {Sora} community. Before continuing to use this website, please review the {polkaswapFaqLink} and documentation, which includes a detailed explanation on how {AppName} works, as well as the {memorandumLink}, and {privacyLink}. These documents are crucial to a secure and positive user experience. By using {AppName}, you acknowledge that you have read and understand these documents. You also acknowledge the following: 1) your sole responsibility for compliance with all laws that may apply to your particular use of {AppName} in your legal jurisdiction; 2) your understanding that the current version of {AppName} is an alpha version: it has not been fully tested, and some functions may not perform as designed; and 3) your understanding and voluntary acceptance of the risks involved in using {AppName}, including, but not limited to, the risk of losing tokens. Please do not continue without reading the {polkaswapFaqLink}, {memorandumLink}, {privacyLink}!",
    "disclaimerTitle": "Disclaimer",
    "disconnectWalletText": "Disconnect",
    "doNotShowText": "Don’t show me this again",
    "dragAndDropText": "Drag & drop or choose {extension} file",
    "editText": "Edit",
    "errorText": "Error",
    "ethNetworkFeeTooltipText": "Please note that the {network} network fees displayed on {AppName} are only rough estimations, you can see the correct fee amount in your connected {network} wallet prior to confirming the transaction.",
    "exceededAmountText": "{amount} exceeded",
    "exchange": {
        "balance": "Balance",
        "confirm": "Confirm",
        "lossWarning": "You are going to lose {value}% on your trade. We've detected a liquidity provision issue. This may lead to significant losses during token swaps. Please ensure there is adequate liquidity for your desired swap pair.",
        "ok": "OK",
        "Pool": "Pool",
        "price": "Price",
        "Swap": "Swap",
        "transactionMessage": "{firstToken} and {secondToken}",
        "transactionSubmitted": "Transaction submitted"
    },
    "expandText": "Expand",
    "explore": {
        "myPositions": "my positions",
        "showOnly": "Show only {entities}",
        "synthetics": "synthetic tokens"
    },
    "FAQ": "{AppName} FAQ",
    "fiatDisclaimer": "Please note that the fiat values associated with cryptocurrencies on our website are provided by external services (Subquery, Subsquid, Ceres API)  are approximate. Given the inherent complexity of these calculations, absolute precision at all times cannot be guaranteed.",
    "fiatPayment": {
        "cedeStoreBtn": "Transfer from {value1} via {value2}",
        "cedeStoreDesc": "Transfer any tokens from {value1} to {value2} via {value3}",
        "cedeStoreTitle": "Transfer from {value}",
        "errorMessage": "Apologies for the inconvenience. We're working diligently to resolve this. Please, try again later.",
        "historyBtn": "My purchases",
        "historyTitle": "Transaction History",
        "moonpayDesc": "Purchase ETH tokens on {Ethereum} and transfer them to {Sora} network via the bridge",
        "moonpayTitle": "Buy ETH via MoonPay"
    },
    "filter": {
        "all": "All",
        "native": "Native",
        "reset": "Reset",
        "show": "Show",
        "showAssets": "Show assets",
        "synthetics": "Synthetics",
        "token": "Currencies",
        "verifiedOnly": "Show verified assets only",
        "zeroBalance": "Hide 0 balance assets"
    },
    "firstPerSecond": "{first} per {second}",
    "firstText": "First",
    "footer": {
        "internet": {
            "action": "Refresh {AppName}",
            "desc": {
                "disabled": "Disconnected",
                "stable": "Optimal speed",
                "unstable": "Slow connection"
            },
            "dialogDesc": "{AppName} requires internet connection for stable experience",
            "dialogTitle": "Connect to internet source",
            "label": "Your internet speed",
            "title": {
                "disabled": "Internet disabled",
                "stable": "Internet stable",
                "unstable": "Internet unstable"
            }
        },
        "node": {
            "title": {
                "connected": "Node connected",
                "disconnected": "Node disconnected",
                "loading": "Node re-connecting"
            }
        },
        "statistics": {
            "action": "Select services",
            "desc": {
                "available": "All services are stable",
                "loading": "All services are loading",
                "unavailable": "All services are disconnected"
            },
            "dialog": {
                "indexer": "Indexer",
                "title": "{Sora} Network service selection",
                "useCeres": "Use {Ceres} for fiat values"
            },
            "label": "Statistics services",
            "title": {
                "available": "Statistics available",
                "loading": "Statistics loading",
                "unavailable": "Statistics unavailable"
            }
        }
    },
    "footerMenu": {
        "faucet": "Faucet",
        "github": "GitHub",
        "info": "Info & Community",
        "privacy": "Privacy Policy",
        "sorawiki": "{Sora} Wiki"
    },
    "forText": "for",
    "hashiBridgeText": "{Hashi} bridge",
    "headerMenu": {
        "hideBalances": "Hide Balances",
        "hideDisclaimer": "Hide Disclaimer",
        "selectCurrency": "Select Currency",
        "settings": "Settings",
        "showBalances": "Show Balances",
        "showDisclaimer": "Show Disclaimer",
        "switchTheme": "{theme} mode",
        "titleBalance": "Balances",
        "titleCurrency": "Fiat currency",
        "titleMisc": "Misc",
        "titleTheme": "Color theme",
        "turnPhoneHideBalances": "Turn phone & hide"
    },
    "helpDialog": {
        "appVersion": "{AppName} version",
        "contactUs": "Contact us",
        "privacyPolicy": "Privacy Policy",
        "termsOfService": "Terms of Service",
        "title": "Help"
    },
    "history": {
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here",
        "emptySearch": "No transactions found",
        "filterPlaceholder": "Filter by Address, Symbol, Type or Block ID"
    },
    "historyErrorMessages": {
        "balances": {
            "liquidityrestrictions": "Account liquidity restrictions prevent withdrawal"
        },
        "demeterfarmingplatform": {
            "insufficientfunds": "Insufficient funds",
            "insufficientlptokens": "Insufficient liquidity provision tokens",
            "pooldoesnothaverewards": "Pool does not have rewards"
        },
        "generalError": "Something went wrong",
        "liquidityproxy": {
            "forbiddenfilter": "Selected liquidity source is not allowed",
            "slippagenottolerated": "The price impact has exceeded the selected value"
        },
        "multicollateralbondingcurvepool": {
            "pricecalculationfailed": "An error occurred while calculating the price"
        },
        "poolxyk": {
            "calculatedvalueisnotmeetsrequiredboundaries": "Amounts are out of required bounds",
            "impossibletodecidevalidpairvaluesfromrangeforthispool": "Provided amounts are too diverse",
            "sourcebalanceisnotlargeenough": "Source balance is not large enough",
            "targetbalanceisnotlargeenough": "Destination balance is not large enough",
            "unabletodepositxorlessthanminimum": "XOR lower than the minimum value (0.007)",
            "zerovalueinamountparameter": "Amount parameter has zero value"
        },
        "referrals": {
            "alreadyhasreferrer": "Account already has a referrer",
            "referrerinsufficientbalance": "Referrer does not have enough of reserved balance"
        },
        "vestedrewards": {
            "cantcalculatereward": "Failed to perform reward calculation",
            "norewardsforasset": "There are no rewards for this asset",
            "rewardssupplyshortage": "Rewards program has already finished"
        },
        "xstpool": {
            "poolalreadyinitializedforpair": "Pool pair already exists",
            "slippagelimitexceeded": "Slippage tolerance has not met proper limits"
        }
    },
    "importText": "Import",
    "insufficientBalanceText": "Insufficient {tokenSymbol} balance",
    "kensetsu": {
        "addCollateral": "Add collateral",
        "addCollateralDescription": "Deposit more assets into your position to increase your borrowing limit or to improve your loan-to-value ratio. This can also help prevent liquidation.",
        "available": "Available",
        "availableToBorrow": "Available to borrow",
        "availableToBorrowDescription": "The remaining amount you are eligible to draw under the current conditions of your position, based on your deposited collateral and any existing debt.",
        "borrowDebt": "Borrow debt",
        "borrowMore": "Borrow more",
        "borrowMoreDescription": "Draw additional funds from your position up to the maximum available amount. Ensure your collateral value supports the increased debt to avoid liquidation risks.",
        "borrowTax": "Borrow tax",
        "borrowTaxDescription": "The {value} tax applied to the borrowed amount",
        "closeVault": "Close my position",
        "closeVaultDescription": "Close the selected position by repaying all outstanding debt and withdrawing all collateral",
        "collateralDetails": "Collateral details",
        "createVault": "Open a borrow position",
        "createVaultAction": "Borrow",
        "createVaultDescription": "Initiate a new transaction by depositing collateral into your position and drawing funds. This creates a debt obligation that you must manage.",
        "debtAvailable": "Debt available",
        "debtAvailableDescription": "The amount of funds you can still draw from your position without exceeding your borrowing limit, based on your current collateral.",
        "debtDetails": "Debt details",
        "depositCollateral": "Deposit collateral",
        "disclaimerDescription": "Borrowing digital assets through {AppName} carries significant risk and is entirely at your own risk. The value of digital assets is highly volatile, and any changes in the market prices of the assets you have borrowed or used as collateral can lead to substantial financial losses.",
        "error": {
            "borrowMoreThanAvailable": "Available debt exceeded",
            "enterBorrow": "Enter borrow amount",
            "enterCollateral": "Enter collateral",
            "enterRepayDebt": "Enter repay debt",
            "incorrectCollateral": "Token pair is not supported",
            "insufficientCollateral": "Insufficient collateral",
            "repayMoreThanDebt": "Debt overpaid"
        },
        "highLiquidationRisk": "High liquidation risk",
        "interest": "Interest",
        "interestDescription": "An annual fee charged on the amount drawn from your position, calculated as a percentage. This fee compensates for risks and market fluctuations.",
        "introDescription": "Experience safe and effortless borrowing and lending. Open borrowing positions with {Kensetsu} platform.",
        "introTitle": "Open borrow positions & Earn with {Kensetsu}",
        "liquidated": "Liquidated",
        "liquidatedMessage": "Liquidated {amount} {symbol}",
        "liquidationClose": "Liquidation close",
        "liquidationPenalty": "Liquidation penalty",
        "liquidationPenaltyDescription": "A fee applied if the value of your collateral falls below a certain threshold, prompting the sale of assets to cover the debt. This penalty increases your total debt.",
        "ltv": "Loan to value ({LTV})",
        "ltvDescription": "The ratio of the amount drawn to the value of the collateral in your position, expressed as a percentage. A higher {LTV} increases potential returns but also risk, including the chance of liquidation.",
        "ltvMaxTooltip": "The maximum amount of a borrowing position that can be provided in relation to the appraised value of the asset being used as collateral.",
        "maxAvailableToBorrow": "Max. available to borrow",
        "maxAvailableToBorrowDescription": "The maximum amount you can draw from your position, determined by the value of your collateral. This limit adjusts as the value of the collateral changes.",
        "minDepositCollateral": "Min. deposit collateral",
        "minDepositCollateralDescription": "The minimum amount of assets required to open a position. This initial deposit secures the funds you wish to borrow.",
        "openSwap": "Open swap",
        "outstandingDebt": "Outstanding debt",
        "outstandingDebtDescription": "The total amount you currently owe from the funds drawn from your position, including accrued interest. This needs to be repaid to close your position or maintain healthy loan-to-value ratios.",
        "overallAvailable": "Total available",
        "overallAvailableDescription": "The total amount of funds available for borrowing on the {Kensetsu} platform.",
        "overallBadDebt": "Bad debt",
        "overallBadDebtDescription": "The portion of debt that is unlikely to be recovered due to borrower default or insufficient collateral.",
        "overallTotalCollateral": "Total collateral",
        "overallTotalCollateralDescription": "The total value of assets deposited by borrowers to secure their borrowing positions on the {Kensetsu} platform.",
        "overallTotalDebt": "Total debt",
        "overallTotalDebtDescription": "The total amount of debt currently outstanding across all borrowing positions on the {Kensetsu} platform.",
        "positionHistory": "Position history",
        "positionInfo": "Position information",
        "positionSafe": "Position safe",
        "readMore": "Read more",
        "reopen": "Re-open",
        "repayDebt": "Repay debt",
        "repayDebtDescription": "Return borrowed funds to reduce your outstanding debt. This can decrease interest costs and lower the risk of liquidation.",
        "requiredAmountWithSlippage": "Required amount including slippage",
        "requiredAmountWithSlippageDescription": "For a smooth position closure, buy slightly more {tokenSymbol} than the {amount} required due to possible slippage. You need an extra to cover the shortfall. Swap your assets into {tokenSymbol} to meet this need.",
        "status": {
            "Closed": "Closed",
            "Liquidated": "Liquidated",
            "Opened": "Active"
        },
        "totalCollateral": "Total collateral",
        "totalCollateralDescription": "The total value of all assets currently deposited in your position. This value affects your borrowing capacity and risk of liquidation.",
        "totalCollateralReturned": "Total collateral returned",
        "totalCollateralReturnedDescription": "The total value of assets returned to you after closing your position, including total remaining collateral.",
        "yourCollateral": "Your collateral",
        "yourCollateralDescription": "The assets you've deposited into your position to secure the funds drawn. These assets may be liquidated by the lender if you fail to maintain the required loan-to-value ratio.",
        "yourDebt": "Your debt",
        "yourDebtDescription": "The total amount currently outstanding in your position, including the drawn amount and any accrued interest. This balance increases over time if interest accumulates.",
        "yourDebtTokenBalance": "Your {tokenSymbol} balance"
    },
    "lastText": "Last",
    "learnMoreText": "Learn more",
    "light": "Light",
    "locationText": "Location",
    "logoutText": "Log out",
    "mainMenu": {
        "About": "About",
        "AssetOwnerContainer": "@:pageTitle.AssetOwner",
        "Bridge": "@:bridgeText",
        "Burn": "@:pageTitle.Burn",
        "Explore/Container": "Explore",
        "Farming": "Farming",
        "OrderBook": "Trade",
        "Pool": "Pool",
        "Rewards": "Rewards",
        "SoraCard": "{Sora} Card",
        "StakingContainer": "Staking",
        "Stats": "Statistics",
        "Swap": "Swap",
        "VaultsContainer": "@:pageTitle.Vaults",
        "Wallet": "Account"
    },
    "marketAlgorithmText": "Market algorithm",
    "marketMakerCountdown": {
        "blocks": "blocks",
        "daysLeft": "days left",
        "description": "20 million PSWAP / month will be distributed to market makers with at least 500 tx / month valued over 1 XOR.",
        "title": "Market Maker Countdown",
        "txs": "TXs",
        "volume": "MM TX volume"
    },
    "marketText": "Market",
    "maxAmountText": "max. amount",
    "memorandum": "{AppName} Memorandum and Terms of Services",
    "minAmountText": "min. amount",
    "mobilePopup": {
        "header": "Download {Sora} Wallet with {polkaswapHighlight} features",
        "info": "Swap tokens from different networks - {Sora}, {Ethereum}, {Polkadot}, {Kusama}. Provide liquidity pool and earn % from exchange fees.",
        "sideMenu": "Get {Sora} Wallet"
    },
    "moonpay": {
        "buttons": {
            "buy": "Buy Tokens",
            "history": "Purchase History",
            "transfer": "Start bridge",
            "view": "View bridge transaction"
        },
        "confirmations": {
            "txReady": "Transaction Ready For Bridge"
        },
        "history": {
            "empty": "@:noDataText",
            "title": "Purchase history"
        },
        "notifications": {
            "accountAddressError": {
                "text": "Unfortunately, the {Hashi} bridge transaction failed due to the recipient address of the tokens in the @:moonpayText order does not match your current {Ethereum} account address. Please switch {Ethereum} account in extension and try again.",
                "title": "Wrong {Ethereum} account"
            },
            "amountError": {
                "text": "Unfortunately the {Hashi} bridge transaction has failed due to there not being enough tokens for transaction. Please check your {Ethereum} account balance and try again.",
                "title": "Insufficient balance"
            },
            "feeError": {
                "text": "Unfortunately the {Hashi} bridge transaction has failed due to there not being enough ETH to pay for the {Ethereum} network transation fees. Please add more ETH and try again.",
                "title": "Not enough ETH for the bridge tx"
            },
            "success": {
                "text": "Token purchase is finished. The {Hashi} bridge transaction will start automatically as soon as the tokens have been received in the connected {Ethereum} account. It is safe to close this window and continue using {AppName}. There will be a notification about the bridge transaction when ready.",
                "title": "Tokens purchased"
            },
            "supportError": {
                "text": "Unfortunately the token purchased via @:moonpayText is not yet supported by the {Hashi} bridge in {AppName}. Normally only the supported tokens should be available for purchase via MoonPay in {AppName}, hence something must have gone wrong somewhere. Please don’t hesitate to let the community know about this case in the <a class=\"link\" href=\"https://t.me/polkaswap\" target=\"_blank\" rel=\"nofollow noopener\" title=\"{AppName}\">{AppName} Telegram group</a>.",
                "title": "Token not supported"
            },
            "transactionError": {
                "text": "Unfortunately it appears that the @:moonpayText transaction has failed. Please try again. For @:moonpayText support go to <a class=\"link\" href=\"https://support.moonpay.com\" target=\"_blank\" rel=\"nofollow noopener\" title=\"@:moonpayText\">https://support.moonpay.com</a>",
                "title": "Transaction has failed"
            }
        },
        "tooltips": {
            "transfer": "Tokens successfully purchased!\nClick to start the bridge transaction"
        }
    },
    "moonpayText": "MoonPay",
    "multipleRecipients": "Multiple Recipients",
    "nameText": "Name",
    "networkFeeText": "Network Fee",
    "networkFeeTooltipText": "Network fee is used to ensure {Sora} system's growth and stable performance.",
    "networkStatisticsText": "Network statistics",
    "newAccountsText": "New accounts",
    "nextText": "Next",
    "noDataText": "No data",
    "node": {
        "errors": {
            "connection": "An error occurred while connecting to the node\n{address}\n",
            "existing": "This node is already added: {title}\n",
            "network": "The node\n{address}\n is from the another network\n"
        },
        "messages": {
            "connected": "Connection established with node\n{address}\n",
            "selectNode": "Please select node to connect from the node list"
        },
        "warnings": {
            "disconnect": "Connection to the node has been lost. Reconnecting..."
        }
    },
    "noir": "Noir",
    "ofText": "{first} of {second}",
    "operations": {
        "AddLiquidity": "Add Liquidity",
        "andText": "and",
        "BorrowVaultDebt": "Borrow Debt",
        "Burn": "Burn",
        "ClaimRewards": "Claim Rewards",
        "CloseVault": "Close Position",
        "CreatePair": "Create Pair",
        "CreateVault": "Create Position",
        "DemeterFarmingDepositLiquidity": "Stake Liquidity",
        "DemeterFarmingGetRewards": "Claim Rewards",
        "DemeterFarmingStakeToken": "Stake Token",
        "DemeterFarmingUnstakeToken": "Unstake Token",
        "DemeterFarmingWithdrawLiquidity": "Unstake Liquidity",
        "DepositCollateral": "Deposit Position",
        "error": {
            "AddLiquidity": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "BorrowVaultDebt": "Failed to borrow {amount} {symbol}",
            "Burn": "Failed to burn {amount} {symbol}",
            "ClaimRewards": "Failed to claim rewards {rewards}",
            "CloseVault": "Failed to close {symbol}/{symbol2} position",
            "CreatePair": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "CreateVault": "Failed to create {symbol}/{symbol2} position",
            "DemeterFarmingDepositLiquidity": "Failed to supply {amount} {symbol} and {symbol2} LP tokens",
            "DemeterFarmingGetRewards": "Failed to claim {symbol}",
            "DemeterFarmingStakeToken": "Failed to add {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Failed to remove {amount} {symbol}",
            "DemeterFarmingWithdrawLiquidity": "Failed to remove {amount} {symbol} and {symbol2} LP tokens",
            "DepositCollateral": "Failed to deposit {amount} {symbol}",
            "EthBridgeIncoming": "Failed to transfer {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Failed to transfer {amount} {symbol} from {Sora} to {Ethereum}",
            "Mint": "Failed to mint {amount} {symbol} to {address}",
            "OrderBookCancelLimitOrder": "Failed to cancel limit order",
            "OrderBookCancelLimitOrders": "Failed to cancel limit orders",
            "OrderBookPlaceLimitOrder": "Failed to place limit order of {amount} {symbol} at {price} {symbol2}",
            "ReferralReserveXor": "Failed to bond {amount} XOR",
            "ReferralSetInvitedUser": "Failed to set {role} {address}",
            "ReferralUnreserveXor": "Failed to unbond {amount} XOR",
            "RegisterAsset": "Failed to register {symbol} asset",
            "RemoveLiquidity": "Failed to remove {amount} {symbol} and {amount2} {symbol2}",
            "RepayVaultDebt": "Failed to repaid {amount} {symbol}",
            "StakingBond": "Failed to bond {amount} {symbol}",
            "StakingBondAndNominate": "Failed to bond {amount} {symbol}",
            "StakingBondExtra": "Failed to bond extra {amount} {symbol}",
            "StakingChill": "Failed to chill",
            "StakingNominate": "Failed to nominate validators",
            "StakingPayout": "Failed to payout rewards",
            "StakingRebond": "Failed to rebond {amount} {symbol}",
            "StakingSetController": "Failed to set controller {address}",
            "StakingSetPayee": "Failed to set payee {address}",
            "StakingUnbond": "Failed to unbond {amount} {symbol}",
            "StakingWithdrawUnbonded": "Failed to withdraw {amount} {symbol}",
            "Swap": "Failed to swap {amount} {symbol} for {amount2} {symbol2}",
            "SwapAndSend": "Failed to swap {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "SwapTransferBatch": "Failed to {action} {amount} {symbol}",
            "Transfer": "Failed to {action} {amount} {symbol} {direction} {address}"
        },
        "EthBridgeIncoming": "@:hashiBridgeText",
        "EthBridgeOutgoing": "@:hashiBridgeText",
        "finalized": {
            "AddLiquidity": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "BorrowVaultDebt": "Borrowed {amount} {symbol}",
            "Burn": "Burned {amount} {symbol}",
            "ClaimRewards": "Reward claimed successfully {rewards}",
            "CloseVault": "{symbol}/{symbol2} Position closed",
            "CreatePair": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "CreateVault": "{symbol}/{symbol2} Position created",
            "DemeterFarmingDepositLiquidity": "Supplied {symbol} and {symbol2} {amount} LP tokens",
            "DemeterFarmingGetRewards": "{amount} {symbol} claimed successfully",
            "DemeterFarmingStakeToken": "Added {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Removed {amount} {symbol}",
            "DemeterFarmingWithdrawLiquidity": "Removed {symbol} and {symbol2} {amount} LP tokens",
            "DepositCollateral": "Deposited {amount} {symbol}",
            "EthBridgeIncoming": "Transfered {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Transfered {amount} {symbol} from {Sora} to {Ethereum}",
            "Mint": "Minted {amount} {symbol} to {address}",
            "OrderBookCancelLimitOrder": "Limit order cancelled",
            "OrderBookCancelLimitOrders": "Limit orders cancelled",
            "OrderBookPlaceLimitOrder": "{side} {amount} {symbol} at {price} {symbol2} placed",
            "ReferralReserveXor": "Bonded {amount} XOR",
            "ReferralSetInvitedUser": "{role} {address} is set successfully",
            "ReferralUnreserveXor": "Unbonded {amount} XOR",
            "RegisterAsset": "Registered {symbol} asset",
            "RemoveLiquidity": "Removed {amount} {symbol} and {amount2} {symbol2}",
            "RepayVaultDebt": "Repaid {amount} {symbol}",
            "StakingBond": "Bonded {amount} {symbol}",
            "StakingBondAndNominate": "Bonded {amount} {symbol}",
            "StakingBondExtra": "Bonded extra {amount} {symbol}",
            "StakingChill": "Chill",
            "StakingNominate": "Nominated validators",
            "StakingPayout": "Payout rewards",
            "StakingRebond": "Rebonded {amount} {symbol}",
            "StakingSetController": "Set controller {address}",
            "StakingSetPayee": "Set payee {address}",
            "StakingUnbond": "Unbonded {amount} {symbol}",
            "StakingWithdrawUnbonded": "Withdrew {amount} {symbol}",
            "Swap": "Swapped {amount} {symbol} for {amount2} {symbol2}",
            "SwapAndSend": "Swapped {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "SwapTransferBatch": "{action} {amount} {symbol}",
            "Transfer": "{action} {amount} {symbol} {direction} {address}"
        },
        "Mint": "Mint",
        "OrderBookCancelLimitOrder": "Cancel Order",
        "OrderBookCancelLimitOrders": "Cancel Orders",
        "OrderBookPlaceLimitOrder": "Place Order",
        "ReferralReserveXor": "Bond XOR",
        "ReferralSetInvitedUser": "Set {role}",
        "ReferralUnreserveXor": "Unbond XOR",
        "RegisterAsset": "Register Asset",
        "RemoveLiquidity": "Remove Liquidity",
        "RepayVaultDebt": "Repay Debt",
        "StakingBond": "Bond",
        "StakingBondAndNominate": "Bond and Nominate",
        "StakingBondExtra": "Bond Extra",
        "StakingChill": "Chill",
        "StakingNominate": "Nominate",
        "StakingPayout": "Payout Rewards",
        "StakingRebond": "Rebond",
        "StakingSetController": "Set Controller",
        "StakingSetPayee": "Set Payee",
        "StakingUnbond": "Unbond",
        "StakingWithdrawUnbonded": "Withdraw Unbonded",
        "Swap": "Swap",
        "SwapAndSend": "Swap and Send",
        "SwapTransferBatch": "{ADAR} transfer",
        "Transfer": "Transfer"
    },
    "orderBook": {
        "amount": "amount",
        "book": {
            "noAsks": "No opened asks",
            "noBids": "No opened bids"
        },
        "bookStatus": {
            "active": "Active",
            "cancelable": "Cancelable",
            "inactive": "Inactive",
            "placeable": "Placeable"
        },
        "Buy": "Buy {asset}",
        "cantPlaceOrder": "Can't place order",
        "change": "change",
        "dayVolume": "1D Volume",
        "dialog": {
            "askCancel": "Are you sure you want to cancel all of your open orders?",
            "at": "at {price} {symbol}",
            "buy": "Buy {amount} {symbol}",
            "cancelAll": "Yes, cancel all",
            "placeLimit": "Place limit order",
            "placeMarket": "Place market order",
            "sell": "Sell {amount} {symbol}"
        },
        "enterAmount": "Enter amount",
        "error": {
            "accountLimit": {
                "reading": "Limit reached: Each account is confined to 1024 limit orders. Please wait until some of your orders fulfill",
                "reason": "Too many orders is ongoing"
            },
            "beyondPrecision": {
                "reading": "Precision exceeded: The amount/price entered has too many decimal places. Please input a value with fewer decimal places",
                "reason": "Entered price is too precise to calculate"
            },
            "exceedsSpread": {
                "reading": "Price exceeded: a market's bid or ask price exceeded its ask/bid price",
                "reason": "Price exceeded spread"
            },
            "marketNotAvailable": {
                "reading": "Market order limitation: There are not enough orders available to fulfill this market order. Please adjust your order size or wait for more orders to be placed",
                "reason": "Not enough orders available to fullfill this order"
            },
            "multipleOf": {
                "reading": "To process your order, please input a price that is a multiple of {value}",
                "reason": "Entered price is too specific"
            },
            "outOfBounds": {
                "reading": "Blockchain range exceeded: Your entered amount falls outside the blockchain's allowed range. Min: {min}; Max: {max}",
                "reason": "Amount fails to comply with blockchain range"
            },
            "singlePriceLimit": {
                "reading": "Limit reached: Each position is confined to 1024 limit orders. Please wait until some orders fulfill",
                "reason": "Too many orders is ongoing for this price"
            },
            "spotLimit": {
                "reading": "Price range cap: Each order book side is limited to 1024 unique price points. Please select a price within the existing range or wait for space to become available",
                "reason": "Trading side has been filled"
            }
        },
        "history": {
            "cancel": "Cancel order {value}",
            "cancelAll": "Cancel all",
            "connect": "Connect an account to start trading",
            "openOrders": "Open orders {value}",
            "orderHistory": "Order history",
            "tradeHistory": "Trade history"
        },
        "limit": "Limit",
        "market": "Market",
        "marketTrades": "Market trades",
        "month": "month",
        "orderBook": "Orderbook",
        "orderStatus": {
            "active": "Active",
            "canceled": "Canceled",
            "expired": "Expired",
            "filled": "Filled"
        },
        "orderTable": {
            "filled": "filled",
            "lifetime": "lifetime",
            "noOrders": "No orders. Create your first one!",
            "pair": "pair",
            "side": "side",
            "time": "time"
        },
        "price": "Price",
        "Sell": "Sell {asset}",
        "setPrice": "Set price",
        "stop": "Book stopped",
        "time": "time",
        "tokenPair": "Token pair",
        "tooltip": {
            "bookStatus": {
                "active": "Full trading functionality enabled. You can place new orders or cancel existing ones.",
                "cancelable": "You can only cancel existing orders. New order placement is currently disabled.",
                "inactive": "All trading activities are currently halted. No orders can be placed or canceled at this time.",
                "placeable": "Limited functionality. You can place new orders and cancel existing ones, but some features may be unavailable."
            },
            "bookWidget": "A live, constantly updating record of buy (bid) and sell (ask) orders for a specific asset, organized by price level. The order book displays the depth of the market, including the quantities of assets being offered at various prices. Traders utilize this detailed view to gauge market sentiment, identify potential resistance and support levels, and anticipate price movements based on existing demand and supply",
            "limitOrder": "A 'Limit' order lets you specify the exact price at which you want to buy or sell an asset. A 'Limit Buy' order will only be executed at the specified price or lower, while a 'Limit Sell' order will execute only at the specified price or higher. This control ensures you don't pay more or sell for less than you're comfortable with.",
            "marketOrder": "A 'Market Order' is an order to immediately buy or sell at the best available current price. It doesn't require setting a price, ensuring a fast execution but with the trade-off of less control over the price received or paid. This type of order is used when certainty of execution is a priority over price control.",
            "marketWidget": "This widget shows a real-time stream of executed trades in the market, providing information on transaction volumes, recent activity, and current market trends. By observing the timing, price, and size of actual trades, traders can gain insights into market dynamics and sentiment, helping them to spot trading opportunities and make informed decisions",
            "pairsList": "A real-time list showing current buy and sell orders for a cryptocurrency. It helps you understand the demand, potential price direction, and trade volume on the {Sora} Network and {AppName} DEX",
            "txDetails": {
                "amount": "The 'Amount' refers to the total number of assets you want to buy or sell in your order. It's important to specify, as it determines the size of your transaction, impacting the total cost for buy orders or revenue for sell orders.",
                "expiryDate": "The 'Expiry Date' is the deadline for your order to be executed. If the market doesn't reach your specified price before this date, the order is automatically cancelled. You're not bound to a perpetual wait if market conditions don't align with your trading preferences.",
                "limit": "The 'Limit Price' is the precise price you set for a limit order. The trade will only execute when the asset's market price meets your limit price, ensuring you don't purchase above or sell below this specified value.",
                "locked": "The 'Locked' shows the amount of asset to be held while order is ongoing.",
                "orderType": "'Buy' order will only be executed at the specified price or lower, while a 'Sell' order will execute only at the specified price or higher. This control ensures you don't pay more or sell for less than you're comfortable with."
            }
        },
        "total": "Total",
        "tradingPair": {
            "choosePair": "Choose trading pair",
            "dailyChange": "Daily change",
            "status": "Status",
            "total": "{amount} {symbol} at {amount2} {symbol2}",
            "volume": "Volume"
        },
        "txDetails": {
            "expiryDate": "expiry date",
            "limitPrice": "limit price",
            "orderType": "order type"
        }
    },
    "pageTitle": {
        "AddLiquidity": "Add Liquidity",
        "AssetOwner": "Asset owner",
        "AssetOwnerDetails": "@:pageTitle.AssetOwner",
        "Bridge": "@:bridgeText",
        "Explore/Books": "@:pageTitle.OrderBook",
        "Explore/Farming": "Farming",
        "Explore/Pools": "Pools",
        "Explore/Staking": "Staking",
        "Explore/Tokens": "Tokens",
        "OrderBook": "Trade",
        "Pool": "Pool",
        "Rewards": "Rewards",
        "Staking": "Staking",
        "Stats": "Statistics",
        "Swap": "Swap",
        "VaultDetails": "Position Details",
        "Vaults": "{Kensetsu}",
        "Wallet": "Wallet"
    },
    "pairIsNotCreated": "Token pair isn't created",
    "points": {
        "accountsText": "{amount} accounts",
        "bridgeVolume": "Bridge volume",
        "feesSpent": "Fees spent",
        "loginText": "Connect your account to see your points",
        "openTelegram": "Open {Telegram}",
        "title": "Your Points Progress",
        "toEarnPoints": "To earn points",
        "xorBurned": "{XOR} burned",
        "yourReferrals": "Your referrals",
        "yourRewards": "Your rewards"
    },
    "polkadotjs": {
        "connectionError": "An error occured while connecting the wallet. You can try to connect the wallet via {extension} again",
        "noAccount": "{extension} account error. Please check your account in the {extension} extension",
        "noExtension": "No {extension} extension was found. Please install it and reload this page",
        "noExtensions": "No {PolkadotJs} extension was found. Please install it and reload this page\nhttps://polkadot.js.org/extension/",
        "noSigner": "Access denied. Go to {extension} extension settings and open \"Manage Website Access\" to allow."
    },
    "pool": {
        "addLiquidity": "Add liquidity",
        "connectToWallet": "Connect an account to view your liquidity.",
        "createPair": "Create a pair",
        "description": "When you add liquidity, you are given pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.",
        "liquidityNotFound": "No liquidity found.",
        "pairTokens": "{pair} Pool Tokens",
        "pooledToken": "{tokenSymbol} Pooled",
        "poolShare": "Your pool share",
        "removeLiquidity": "Remove liquidity",
        "strategicBonusApy": "Strategic Bonus APY"
    },
    "poweredBy": "Powered by",
    "prevText": "Previous",
    "priceChartText": "Price chart",
    "provider": {
        "messages": {
            "checkExtension": "{name} extension is busy, please check it",
            "extensionLogin": "Please login to your {name} extension",
            "installExtension": "{name} extension is not found. Please install it!\n\nAlready installed extension? Please reload the page",
            "notAvailable": "{name} is not available.",
            "reloadPage": "Reload page"
        }
    },
    "receivedText": "Received",
    "referralProgram": {
        "action": {
            "bond": "Bond",
            "bondMore": "Bond More",
            "copyLink": "Copy link",
            "empty": "Enter amount of {tokenSymbol}",
            "shareLink": "Share",
            "unbond": "Unbond"
        },
        "balance": "Balance",
        "bondedXOR": "XOR Bonded",
        "bondTitle": "Bond XOR",
        "confirm": {
            "bond": "Confirm bond",
            "freeOfCharge": "This action is free of charge",
            "hasReferrerDescription": "Unfortunately, you can only set one",
            "hasReferrerTitle": "You’ve already set your referrer",
            "inviteDescription": "For every transaction, 10% of the fee will go to your referrer, without any extra cost to you.",
            "inviteTitle": "You have been invited to {AppName}",
            "ok": "OK",
            "signInvitation": "Approve",
            "unbond": "Confirm unbond"
        },
        "connectAccount": "To invite users you need to connect your {Sora} account.",
        "deposit": "Deposit",
        "insufficientBondedAmount": "To invite more referrals, bond at least {inviteUserFee} XOR",
        "insufficientBondedBalance": "Insufficient bonded balance",
        "invitationLink": "Invitation link",
        "inviteViaTelegram": "Invite via {Telegram}",
        "receivedRewards": "Received rewards",
        "referralsNumber": "{number} referrals",
        "referrer": {
            "approve": "Approve",
            "approved": "Approved",
            "description": "You can get referred to {AppName},<br/>type in the link or code of the referrer",
            "info": "When you’ll pay a fee for transaction,<br/>10% will go to your referrer",
            "label": "Invitation link or code",
            "placeholder": "Enter invitation link or code",
            "referredBy": "You’ve been referred by {referrer}",
            "referredLablel": "Referred address",
            "title": "Add your referrer",
            "titleReferrer": "Your referrer"
        },
        "startInviting": "Bond XOR to refer others",
        "title": "Referral Program",
        "transactionDetails": "Transaction Details",
        "unbondTitle": "Unbond XOR",
        "welcomeMessage": "\nJoin me on {AppName}!\n\nDiscover the stylish {DEX} that lets you swap over dozens tokens with cross-chain swaps, order book, and plenty of rewards!\n\n🎁 Invite friends and earn 10% of their trading fees\n\nSee you there!"
    },
    "releaseNotesText": "Release notes",
    "removeLiquidity": {
        "amount": "Amount",
        "balance": "Balance",
        "confirmTitle": "You will receive",
        "description": "Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.",
        "input": "Input",
        "liquidity": "liquidity",
        "locked": "{percent} of your pool is in {lock}",
        "output": "Output",
        "outputMessage": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "price": "Price",
        "remove": "Remove",
        "shareOfPool": "Share of pool after transaction",
        "title": "Remove liquidity"
    },
    "resetText": "Reset",
    "resultDialog": {
        "ok": "OK",
        "title": "Transaction submitted"
    },
    "retryText": "Retry",
    "rewards": {
        "action": {
            "checkRewards": "Check",
            "connectExternalWallet": "Connect {Ethereum} account",
            "pendingExternal": "{Ethereum} transaction pending...",
            "pendingInternal": "{Sora} transaction pending...",
            "signAndClaim": "Sign and claim"
        },
        "andText": "and",
        "claimableAmountDoneVesting": "Claimable rewards",
        "claiming": {
            "pending": "Claiming...",
            "success": "Claimed successfully"
        },
        "events": {
            "BuyOnBondingCurve": "buying from the TBC",
            "LiquidityProvision": "Fees gained from liquidity provision",
            "LiquidityProvisionFarming": "Farming",
            "MarketMakerVolume": "Market Making",
            "NftAirdrop": "NFT Airdrop",
            "SoraFarmHarvest": "{Sora}.farm harvest",
            "XorErc20": "XOR ERC-20"
        },
        "forText": "for",
        "groups": {
            "crowdloan": "Crowdloan rewards",
            "external": "Rewards for the connected {Ethereum} account",
            "strategic": "Strategic Rewards"
        },
        "hint": {
            "connectAccounts": "To claim your PSWAP and VAL rewards you need to connect both your {Sora} and {Ethereum} accounts.",
            "connectAnotherAccount": "Connect another {Ethereum} account to check for available PSWAP and VAL rewards.",
            "connectExternalAccount": "Connect an {Ethereum} account to check for available PSWAP and VAL rewards.",
            "howToClaimRewards": "To claim your {symbols} rewards you need to sign {count} {transactions} in {destination}. Rewards will be deposited to your {Sora} account."
        },
        "notification": {
            "empty": "No available claims for this account"
        },
        "PointSystem": "Points",
        "ReferralProgram": "Referrals",
        "Rewards": "Rewards",
        "signing": {
            "accounts": "your {Sora} and {Ethereum} accounts respectively",
            "extension": "{PolkadotJs} browser extension"
        },
        "totalVested": "Total rewards",
        "transactions": {
            "confimation": "Confirm {order} of {total} transactions...",
            "failed": "{order} of {total} transactions failed. @:retryText",
            "success": "You will receive your rewards shortly"
        }
    },
    "rotatePhoneNotification": {
        "enableAcceleration": "Enable acceleration access in your settings.",
        "gyroscropePhone": " Our technology uses your phone's built-in gyroscope to instantly hide your balance when you tilt your device.",
        "info": "For extra privacy, tilt your device face down to instantly hide your asset balances. This feature uses your phone’s built-in sensors.",
        "title": "Turn your device upside down to hide balances"
    },
    "saveText": "Save",
    "searchText": "Search",
    "selectLanguageDialog": {
        "title": "Language"
    },
    "selectNodeConnected": "Connected to: {chain}",
    "selectNodeDialog": {
        "addNode": "Add custom node",
        "connected": "Connected",
        "customNode": "Custom node",
        "howToSetupOwnNode": "Setup your node",
        "messages": {
            "emptyAddress": "Please input the address of the node",
            "emptyName": "Please input the name of the node",
            "incorrectAddress": "Incorrect address",
            "incorrectProtocol": "Address should starts from ws:// or wss://"
        },
        "nodeTitle": "{chain} hosted by {name}",
        "select": "Select",
        "title": "Network node selection",
        "updateNode": "Update node"
    },
    "selectNodeText": "Select Network Node",
    "selectRegisteredAsset": {
        "customAsset": {
            "addressPlaceholder": "Asset ID",
            "alreadyAttached": "Token was already attached",
            "customInfo": "Important! Custom tokens must be registered in {Sora}.",
            "empty": "No tokens found",
            "registerToken": "Register token",
            "symbolPlaceholder": "Token symbol",
            "title": "Custom"
        },
        "search": {
            "emptyListMessage": "No results",
            "networkLabelEthereum": "{network} network mirror tokens",
            "networkLabelSora": "{Sora} network tokens",
            "placeholder": "Filter by Asset ID, Name or Ticker Symbol",
            "title": "Tokens"
        },
        "title": "Select a token"
    },
    "selectToken": {
        "assets": {
            "title": "Assets"
        },
        "copy": "Copy Asset ID",
        "custom": {
            "alreadyAttached": "This token was already attached",
            "notFound": "Token not found",
            "search": "Input Asset ID",
            "text": "CUSTOM TOKENS",
            "title": "Custom"
        },
        "emptyListMessage": "No results",
        "searchPlaceholder": "Filter by Asset ID, Name or Ticker Symbol",
        "title": "Select a token"
    },
    "sendText": "Send",
    "sentText": "Sent",
    "settingsText": "Settings",
    "signAndClaimText": "Sign and claim",
    "social": {
        "github": "GitHub",
        "medium": "Medium",
        "reddit": "Reddit",
        "telegram": "Telegram",
        "twitter": "Twitter",
        "wiki": "{Sora} Wiki"
    },
    "soraStaking": {
        "actions": {
            "claim": "Claim rewards",
            "confirm": "Confirm Staking",
            "more": "Stake more",
            "remove": "Remove stake",
            "withdraw": "Withdraw"
        },
        "allWithdrawsDialog": {
            "information": "Once you unstake tokens, there is a mandatory 7-day unstaking period. After this period, your tokens will not be automatically returned to your wallet. You must complete the process by manually withdrawing your tokens.",
            "title": "Unstaking activity"
        },
        "claimRewardsDialog": {
            "checkRewards": "Check rewards per era and validator",
            "rewardsDestination": "Rewards destination address",
            "title": "Claim rewards"
        },
        "dropdownMenu": {
            "controllerAccount": "Controller account"
        },
        "info": {
            "minimumStake": "Minimum stake",
            "nominators": "Nominators",
            "rewarded": "Rewarded",
            "rewardToken": "Reward token",
            "selectedValidators": "Selected validators",
            "stakingBalance": "Staking balance",
            "totalLiquidityStaked": "Total liquidity staked",
            "unstaking": "Unstaking",
            "unstakingPeriod": "Unstaking period",
            "validators": "Validators"
        },
        "newStake": {
            "title": "Start staking"
        },
        "overview": {
            "description": "Stake {XOR} tokens on {Sora} Network as a nominator to validate transactions and earn {VAL} token rewards.",
            "title": "{Sora} Staking"
        },
        "pendingRewardsDialog": {
            "information": "Validators payout the rewards every 2-5 days. However, you can payout them by yourself, especially if rewards are close to expiring, but you will pay the fee.",
            "noPendingRewards": "There are no pending rewards",
            "noSelectedRewards": "Select rewards",
            "payout": "Payout",
            "title": "Pending rewards"
        },
        "selectedValidators": "{count} ({Max} {max})",
        "selectValidatorsMode": {
            "confirm": {
                "manual": "I`ll pick the validators myself",
                "suggested": "Stake with suggested"
            },
            "criteria": {
                "0": "Most profitable",
                "1": "Not oversubscribed",
                "2": "Having onchain identity",
                "3": "Not slashed",
                "4": "Limit of 2 validators per identity"
            },
            "description": "{Sora} network algorithm has selected a list of recommended validators based on the criteria:",
            "title": "Stake with validators suggested by the algorithm"
        },
        "stakeDialog": {
            "toRemove": "To remove",
            "toStake": "To stake"
        },
        "validators": {
            "alreadyNominated": "Selected validators already nominated",
            "change": "Change validators",
            "next": "Next",
            "recommended": "Recommended validators",
            "save": "Save changes",
            "select": "Select validators",
            "selected": "{selected}/{total} selected",
            "tooManyValidators": "Too many validators selected ({Max} {max})"
        },
        "validatorsAttentionDialog": {
            "confirm": "Yes, I understand the risk",
            "description": {
                "0": "Algorithmic validator suggestions do not constitute financial consultation or advice. Staking is a high-risk activity, and algorithmic validator suggestions do not necessarily mitigate this risk.",
                "1": "A validator suggested by the algorithm could still be slashed. A validator suggested by the algorithm could also change their parameters (e.g.,commission rates, etc.) at any time after having been suggested and/or selected.",
                "2": "You could lose tokens or rewards for these or other reasons. Only stake tokens and use validator suggestions at your own discretion, after conducting due diligence and carefully considering the risks involved."
            },
            "title": "Attention"
        },
        "validatorsDialog": {
            "tabs": {
                "all": "All",
                "user": "Yours"
            },
            "title": {
                "edit": "Edit My Validators"
            }
        },
        "validatorsFilterDialog": {
            "filters": {
                "hasIdentity": {
                    "description": "At least one identity contact connected to the account",
                    "name": "On-chain identity"
                },
                "notOversubscribed": {
                    "description": "Account within allocation limit, avoids oversubscription penalties on {Polkadot} staking.",
                    "name": "Not oversubscribed"
                },
                "notSlashed": {
                    "description": "Not experienced any penalties or reductions in their staked funds due to misconduct or protocol violations.",
                    "name": "Not slashed"
                },
                "twoValidatorsPerIdentity": {
                    "description": "A maximum of two validators per identity to promote decentralization and prevent concentration of power.",
                    "name": "Limit of 2 validators per identity"
                }
            },
            "reset": "Reset all",
            "save": "Save filter",
            "title": "Filters"
        },
        "validatorsList": {
            "commission": "Commission",
            "commissionTooltip": "Commission refers to the fee charged by validators for their services in the staking process. This fee, expressed as a percentage, is deducted from the staking rewards earned by nominators before distribution. It's important to note that validators can adjust their commission rates at any time",
            "name": "Name",
            "noNominatedValidators": "You don't have any nominated validators",
            "noValidators": "There are no validators satisfying the specified filter",
            "return": "Return",
            "search": "Search..."
        },
        "withdraw": {
            "beingWithdrawn": "Being withdrawn",
            "countdownLeft": "left",
            "nextWithdrawal": "Next withdrawal",
            "seeAll": "See all",
            "withdrawable": "Withdrawable"
        },
        "withdrawDialog": {
            "showAllWithdraws": "Show all withdraws",
            "title": "Withdraw unstaked funds"
        }
    },
    "stepText": "Step",
    "successText": "Success",
    "swap": {
        "confirmSwap": "Confirm swap",
        "errorFetching": "Error fetching the data",
        "estimated": "estimated",
        "insufficientAmount": "Insufficient {tokenSymbol} amount",
        "insufficientLiquidity": "Insufficient liquidity",
        "liquidityProviderFee": "Liquidity Provider Fee",
        "liquidityProviderFeeTooltip": "A portion of each trade ({liquidityProviderFee}%) goes to liquidity providers as a protocol incentive.",
        "maxSold": "Maximum Sold",
        "minReceived": "Minimum Received",
        "minReceivedTooltip": "Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.",
        "priceImpact": "Price Impact",
        "priceImpactTooltip": "The difference between the market price and estimated price due to trade size.",
        "rewardsForSwap": "PSWAP Strategic Rewards",
        "route": "Route",
        "slippageTolerance": "Slippage Tolerance",
        "swapInputMessage": "Input is estimated. You will sell maximum {transactionValue} or the transaction will revert.",
        "swapOutputMessage": "Output is estimated. You will receive at least {transactionValue} or the transaction will revert."
    },
    "swapText": "Swap",
    "tokens": {
        "assetId": "Asset ID",
        "symbol": "Symbol"
    },
    "tooltips": {
        "accounts": "Accounts are digital addresses that hold user's assets on the network. Each account is associated with a unique public address and a private key that allows the user to access and manage their assets.",
        "bridgeTransactions": "{from} to {to} bridge refers to the process of transferring assets between the {from} and {to} networks using a bridge. The bridge allows for the interoperability of the two networks, enabling users to seamlessly move assets between them.",
        "fees": "Fees on the {Sora} blockchain refer to the charges that are incurred for executing transactions on the network. These fees are paid in XOR, the native cryptocurrency of the {Sora} Network. The fee amount is determined by the complexity and size of the transaction being executed",
        "roi": "{ROI} stands for Return on Investment. It is calculated by dividing the profit earned on an investment by the cost of that investment in a percentage equivalent.",
        "supply": "Token supply refers to the total number of tokens that have been created and are in circulation on the network. The token supply can fluctuate based on the amount of tokens being staked, burned, or transferred on the network.",
        "transactions": "Transactions refer to the process of sending or receiving digital assets on the network, including liquidity operations, as well as swaps.",
        "tvl": "{TVL} stands for Total Value Locked. It represents tokens locked in the pools in the dollar equivalent.",
        "velocity": "Token velocity is the number of times token changes accounts during period (month) on average. It indicates the level of trading activity and liquidity.",
        "volume": "Volume refers to the total amount of assets that have been traded or exchanged on the network over a specific period of time. The volume is an important metric for measuring the liquidity and overall activity of the network."
    },
    "transaction": {
        "amount": "@:amountText",
        "amount2": "@:amountText 2",
        "blockId": "Block Id",
        "comment": "Comment",
        "copy": "Copy {value}",
        "fee": "Transaction Fee",
        "from": "From",
        "history": {
            "confirmed": "Transaction confirmed",
            "created": "Transaction for {amount} {symbol} has been created.",
            "submitted": "Transaction submitted with fee of {fee} {symbol}"
        },
        "price": "Price",
        "referral": "Referral",
        "referrer": "Referrer",
        "side": "Side",
        "startTime": "Date",
        "status": "Status",
        "statuses": {
            "complete": "Complete",
            "failed": "Transaction failed",
            "pending": "Pending..."
        },
        "title": "Transaction details",
        "to": "To",
        "total": "Total",
        "txId": "Transaction Id",
        "viewIn": "View in {explorer}"
    },
    "transactionDetailsText": "Transaction Details",
    "transactionSubmittedText": "Transaction was submitted",
    "transactionText": "transaction | transactions",
    "transfers": {
        "from": "From",
        "to": "To"
    },
    "unknownAssetText": "Unknown asset",
    "unknownErrorText": "ERROR Something went wrong...",
    "wallet": {
        "WalletAssets": "Assets",
        "WalletHistory": "Activity"
    },
    "walletSend": {
        "addressError": "You cannot send tokens to the same account that you are currently connected to.",
        "addressWarning": "Tokens will be sent to the {Sora} address below. Make sure the recipient can access the {Sora} chain to use the tokens:",
        "badAddress": "Incorrect address",
        "balance": "Balance",
        "confirmTitle": "Confirm transaction",
        "enterAddress": "Enter address",
        "enterAmount": "Enter amount",
        "errorAddress": "Invalid address. Please check it and try again.",
        "max": "MAX",
        "title": "Send",
        "tooltip": "Send tokens between {Sora} network accounts"
    },
    "warningText": "Warning"
}