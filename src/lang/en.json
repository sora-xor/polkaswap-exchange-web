{
    "closeText": "Close",
    "backText": "Back",
    "createWalletText": "Create wallet",
    "nameText": "Name",
    "nextText": "Next",
    "importText": "Import",
    "settingsText": "Settings",
    "addAssetText": "Add asset",
    "createTokenText": "Create",
    "comingSoonText": "Coming Soon",
    "successText": "Success",
    "warningText": "Warning",
    "swapText": "Swap",
    "searchText": "Search",
    "cancelText": "Cancel",
    "saveText": "Save",
    "logoutText": "Log out",
    "sendText": "Send",
    "addressText": "Address",
    "amountText": "Amount",
    "confirmText": "Confirm",
    "errorText": "Error",
    "insufficientBalanceText": "Insufficient {tokenSymbol} balance",
    "unknownErrorText": "ERROR Something went wrong...",
    "transactionSubmittedText": "Transaction was submitted",
    "operations": {
        "Swap": "Swap",
        "Transfer": "Transfer",
        "AddLiquidity": "Add Liquidity",
        "RemoveLiquidity": "Remove Liquidity",
        "CreatePair": "Create Pair",
        "RegisterAsset": "Register Asset",
        "ClaimRewards": "Claim Rewards",
        "andText": "and",
        "finalized": {
            "Transfer": "{action} {amount} {symbol} {direction} {address}",
            "Swap": "Swapped {amount} {symbol} for {amount2} {symbol2}",
            "AddLiquidity": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "RemoveLiquidity": "Removed {amount} {symbol} and {amount2} {symbol2}",
            "CreatePair": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "RegisterAsset": "Registered {symbol} asset",
            "ClaimRewards": "Reward claimed successfully {rewards}",
            "ReferralReserveXor": "Bonded XOR successfully",
            "ReferralUnreserveXor": "Unbonded XOR successfully",
            "ReferralSetInvitedUser": "{role} {address} is set successfully",
            "SwapAndSend": "Swapped {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "DemeterFarmingDepositLiquidity": "Supplied {symbol} and {symbol2} {amount} LP tokens",
            "DemeterFarmingWithdrawLiquidity": "Removed {symbol} and {symbol2} {amount} LP tokens",
            "DemeterFarmingStakeToken": "Added {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Removed {amount} {symbol}",
            "DemeterFarmingGetRewards": "{amount} {symbol} claimed successfully",
            "EthBridgeIncoming": "Transfered {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Transfered {amount} {symbol} from {Sora} to {Ethereum}"
        },
        "error": {
            "Transfer": "Failed to {action} {amount} {symbol} {direction} {address}",
            "Swap": "Failed to swap {amount} {symbol} for {amount2} {symbol2}",
            "AddLiquidity": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "RemoveLiquidity": "Failed to remove {amount} {symbol} and {amount2} {symbol2}",
            "CreatePair": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "RegisterAsset": "Failed to register {symbol} asset",
            "ClaimRewards": "Failed to claim rewards {rewards}",
            "ReferralReserveXor": "Failed to bond XOR",
            "ReferralUnreserveXor": "Failed to unbond XOR",
            "ReferralSetInvitedUser": "Failed to set {role} {address}",
            "SwapAndSend": "Failed to swap {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "DemeterFarmingDepositLiquidity": "Failed to supply {amount} {symbol} and {symbol2} LP tokens",
            "DemeterFarmingWithdrawLiquidity": "Failed to remove {amount} {symbol} and {symbol2} LP tokens",
            "DemeterFarmingStakeToken": "Failed to add {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Failed to remove {amount} {symbol}",
            "DemeterFarmingGetRewards": "Failed to claim {symbol}",
            "EthBridgeIncoming": "Failed to transfer {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Failed to transfer {amount} {symbol} from {Sora} to {Ethereum}"
        },
        "ReferralReserveXor": "Bond XOR",
        "ReferralUnreserveXor": "Unbond XOR",
        "ReferralSetInvitedUser": "Set {role}",
        "SwapAndSend": "Swap and Send",
        "DemeterFarmingDepositLiquidity": "Stake Liquidity",
        "DemeterFarmingWithdrawLiquidity": "Unstake Liquidity",
        "DemeterFarmingStakeToken": "Stake Token",
        "DemeterFarmingUnstakeToken": "Unstake Token",
        "DemeterFarmingGetRewards": "Claim Rewards",
        "EthBridgeIncoming": "@:hashiBridgeText",
        "EthBridgeOutgoing": "@:hashiBridgeText"
    },
    "polkadotjs": {
        "noExtensions": "No {PolkadotJs} extension was found. Please install it and reload this page\nhttps:\/\/polkadot.js.org\/extension\/",
        "noAccounts": "There seems to be no accounts in your {extension} extension. Please add an account and try again.",
        "noAccount": "{extension} account error. Please check your account in the {extension} extension",
        "noExtension": "No {extension} extension was found. Please install it and reload this page",
        "noSigner": "Access denied. Go to {extension} extension settings and open \"Manage Website Access\" to allow."
    },
    "connection": {
        "title": "{Sora} Network account",
        "text": "Connect or create your {Sora} Network account with {extensions} extensions. These extensions allow you to securely sign transactions and manage assets in {Sora} Network.",
        "noAccounts": "No account found in your {extension} browser extension. Please add an account and try again.",
        "selectAccount": "Select account to work with",
        "action": {
            "install": "Install extension",
            "learnMore": "Learn more",
            "connect": "Connect account",
            "refresh": "Refresh"
        },
        "selectWallet": "Select a wallet to work with",
        "wallet": {
            "install": "Install"
        }
    },
    "wallet": {
        "title": "{Sora} Network account",
        "WalletAssets": "Assets",
        "WalletActivity": "Activity",
        "addAsset": "@:addAssetText",
        "createToken": "@:createTokenText"
    },
    "walletSend": {
        "title": "Send",
        "address": "@:addressText",
        "amount": "@:amountText",
        "balance": "Balance",
        "max": "MAX",
        "fee": "@:networkFeeText",
        "enterAddress": "Enter address",
        "badAddress": "Incorrect address",
        "enterAmount": "Enter amount",
        "badAmount": "@:insufficientBalanceText",
        "confirmTitle": "Confirm transaction",
        "confirm": "@:confirmText",
        "errorAddress": "Invalid address. Please check it and try again.",
        "feeTooltip": "@:networkFeeTooltipText",
        "tooltip": "Send tokens between {Sora} network accounts",
        "addressWarning": "Tokens will be sent to the {Sora} address below. Make sure the recipient can access the {Sora} chain to use the tokens:",
        "addressError": "You cannot send tokens to the same account that you are currently connected to."
    },
    "account": {
        "successCopy": "Wallet address is copied to the clipboard",
        "copy": "Copy address",
        "switch": "Switch account",
        "walletAddress": "Wallet address"
    },
    "history": {
        "clearHistory": "Clear history",
        "filterPlaceholder": "Filter by Address, Symbol, Type or Block ID",
        "empty": "Your transactions will appear here",
        "emptySearch": "No transactions found",
        "firstText": "First",
        "lastText": "Last",
        "prevText": "Previous",
        "nextText": "Next"
    },
    "assets": {
        "empty": "There are no assets",
        "add": "@:addAssetText",
        "swap": "@:swapText",
        "send": "@:sendText",
        "receive": "@:account.copy",
        "liquidity": "Add liquidity",
        "bridge": "Bridge",
        "copy": "Copy Asset ID",
        "successCopy": "{symbol} Asset ID is copied to the clipboard",
        "copied": "Copied!",
        "balance": {
            "transferable": "Transferable",
            "frozen": "Frozen",
            "locked": "- Locked",
            "reserved": "- Reserved",
            "total": "Total",
            "bonded": "- Bonded"
        },
        "totalAssetsValue": "Total assets value:",
        "details": "Details",
        "assetId": "Asset ID"
    },
    "asset": {
        "remove": "Remove asset",
        "select": "Select an asset",
        "receive": "Receive {symbol}"
    },
    "addAsset": {
        "title": "@:addAssetText",
        "action": "@:addAssetText",
        "success": "Asset {symbol} was added successfully!",
        "empty": "No tokens found",
        "alreadyAttached": "Token was already attached",
        "understand": "I understand",
        "warningTitle": "Trade at your own risk!",
        "warningMessage": "Anyone can create a token, including creating fake versions of existing tokens that claim to represent projects.\nIf you purchase this token, you may not be able to sell it back.",
        "approved": "Asset approved by community",
        "unknown": "Unknown source",
        "scam": "SCAM",
        "next": "Next",
        "AddAssetToken": {
            "title": "Currencies",
            "switchBtn": "Verified assets only"
        },
        "searchInputText": "Search by Asset ID, Name or Ticker Symbol"
    },
    "createToken": {
        "title": "@:createTokenText",
        "desc": "Create and deploy custom asset on {Sora}",
        "action": "@:createTokenText",
        "enterSymbol": "Enter token symbol",
        "enterName": "Enter token name",
        "enterSupply": "Enter token supply",
        "confirm": "@:confirmText",
        "success": {
            "title": "Transaction submitted",
            "desc": "Create {symbol} token"
        },
        "tooltipValue": "@:networkFeeTooltipText",
        "fee": "@:networkFeeText",
        "insufficientBalance": "@:insufficientBalanceText",
        "feeError": "Failed to get a fee for a transaction",
        "error": "Failed to create {symbol} token",
        "tokenSymbol": {
            "placeholder": "Token symbol",
            "desc": "This is an identifier for the token. You can use from 1 to 7 characters for the selection."
        },
        "tokenName": {
            "placeholder": "Token name",
            "desc": "This is a name for the token. You can use from 1 to 33 characters for the selection."
        },
        "tokenSupply": {
            "placeholder": "Token supply",
            "desc": "You will receive these tokens upon creation."
        },
        "extensibleSupply": {
            "placeholder": "Extensible supply",
            "desc": "Ability to mint more tokens."
        },
        "titleCommon": "Create",
        "confirmTokenTitleCommon": "Create Token",
        "confirmTokenTitleNFT": "Create NFT",
        "actionNFT": "@:createTokenTextNFT",
        "provideContent": "Provide content",
        "selectLocalFile": "Select local file",
        "CreateSimpleToken": "Token",
        "nft": {
            "source": {
                "label": "Source",
                "value": "Local files",
                "limit": "Choose another file"
            },
            "link": {
                "placeholder": "IPFS link",
                "copyLink": "Copy link",
                "tooltip": "IPFS is a distributed system for storing and accessing files, making it possible to access files from many locations that aren't managed by one organization."
            },
            "image": {
                "placeholderNoImage": "Upload the file by either entering a link or choosing from local storage",
                "placeholderBadSource": "The file failed to be processed",
                "placeholderBadSourceAddition": "or it’s not uploaded to IPFS yet",
                "placeholderFileLimit": "The file size exceeds the limit of {value}mb"
            },
            "supply": {
                "placeholder": "Token supply",
                "desc": "Amount of NFTs you’re going to get.",
                "quantity": "Quantity"
            },
            "description": {
                "placeholder": "Description"
            }
        },
        "enterTokenDescription": "Enter description",
        "divisible": {
            "placeholder": "Divisible",
            "desc": "Ability of NFT to divide into fractional parts. Liquidity provisioning only works with divisible assets"
        }
    },
    "transaction": {
        "title": "Transaction details",
        "blockId": "Block Id",
        "status": "Status",
        "statuses": {
            "pending": "Pending...",
            "failed": "Transaction failed",
            "complete": "Complete"
        },
        "errorMessage": "Error",
        "startTime": "Date",
        "amount": "@:amountText",
        "amount2": "@:amountText 2",
        "fee": "Transaction Fee",
        "total": "Total",
        "from": "From",
        "to": "To",
        "successCopy": "{value} is copied to the clipboard",
        "copy": "Copy {value}",
        "history": {
            "created": "Transaction for {amount} {symbol} has been created.",
            "submitted": "Transaction submitted with fee of {fee} {symbol}",
            "confirmed": "Transaction confirmed"
        },
        "viewIn": {
            "sorascan": "View in SORAScan",
            "subscan": "View in Subscan"
        },
        "txId": "Transaction Id",
        "referrer": "Referrer",
        "referral": "Referral"
    },
    "appName": "{AppName}",
    "changeNetworkText": "Change network in {Metamask}",
    "transactionText": "transaction | transactions",
    "connectWalletText": "Connect account",
    "changeAccountText": "Change account",
    "connectedText": "Connected",
    "connectWalletTextTooltip": "Connect to {Sora} Network with {PolkadotJs}",
    "selectNodeText": "Select Network Node",
    "bridgeText": "Bridge",
    "disclaimer": "{disclaimerPrefix} This website is maintained by the {Sora} community. Before continuing to use this website, please review the {polkaswapFaqLink} and documentation, which includes a detailed explanation on how {AppName} works, as well as the {memorandumLink}, and {privacyLink}. These documents are crucial to a secure and positive user experience. By using {AppName}, you acknowledge that you have read and understand these documents. You also acknowledge the following: 1) your sole responsibility for compliance with all laws that may apply to your particular use of {AppName} in your legal jurisdiction; 2) your understanding that the current version of {AppName} is an alpha version: it has not been fully tested, and some functions may not perform as designed; and 3) your understanding and voluntary acceptance of the risks involved in using {AppName}, including, but not limited to, the risk of losing tokens. Please do not continue without reading the {polkaswapFaqLink}, {memorandumLink}, {privacyLink}!",
    "poweredBy": "Powered by",
    "confirmTransactionText": "Confirm transaction in {direction}",
    "retryText": "Retry",
    "networkFeeText": "Network Fee",
    "networkFeeTooltipText": "Network fee is used to ensure {Sora} system's growth and stable performance.",
    "ethNetworkFeeTooltipText": "Please note that the {Ethereum} network fees displayed on {AppName} are only rough estimations, you can see the correct fee amount in your connected {Ethereum} wallet prior to confirming the transaction.",
    "marketText": "Market",
    "marketAlgorithmText": "Market algorithm",
    "firstPerSecond": "{first} per {second}",
    "pairIsNotCreated": "Token pair isn't created",
    "pageTitle": {
        "Swap": "Swap",
        "Pool": "Pool",
        "Bridge": "@:bridgeText",
        "About": "About",
        "Stats": "Stats",
        "Support": "Support",
        "Wallet": "Wallet",
        "CreatePair": "Create Pair",
        "AddLiquidity": "Add Liquidity",
        "AddLiquidityId": "Add Liquidity",
        "RemoveLiquidity": "Remove Liquidity",
        "PageNotFound": "Page Not Found",
        "Rewards": "Rewards",
        "Explore\/Tokens": "Tokens",
        "Explore\/Pools": "Pools",
        "Explore\/Staking": "Staking",
        "Explore\/Farming": "Farming",
        "Staking": "Staking"
    },
    "mainMenu": {
        "Swap": "Swap",
        "Pool": "Pool",
        "Bridge": "@:bridgeText",
        "Farming": "Farming",
        "Wallet": "Account",
        "Rewards": "Rewards",
        "About": "About",
        "Stats": "Stats",
        "Support": "Support",
        "CreatePair": "Create Pair",
        "StakingContainer": "Staking",
        "Explore\/Container": "Explore",
        "SoraCard": "{Sora} Card"
    },
    "social": {
        "twitter": "Twitter",
        "telegram": "Telegram",
        "medium": "Medium",
        "reddit": "Reddit",
        "github": "GitHub",
        "wiki": "{Sora} Wiki"
    },
    "footerMenu": {
        "faucet": "Faucet",
        "github": "GitHub",
        "sorawiki": "{Sora} Wiki",
        "memorandum": "{AppName} Memorandum and Terms of Services",
        "privacy": "Privacy Policy",
        "info": "Info & Community"
    },
    "helpDialog": {
        "title": "Help",
        "termsOfService": "Terms of Service",
        "privacyPolicy": "Privacy Policy",
        "appVersion": "{AppName} version",
        "contactUs": "Contact us"
    },
    "aboutNetworkDialog": {
        "title": "About",
        "learnMore": "@:learnMoreText",
        "network": {
            "title": "What is {Sora}?",
            "description": "{AppName} is built on top of the {Sora} Network, and the {Sora} token (XOR) is used for gas\/fees and liquidity provision on {AppName}. {Sora} Network allows for reduced fees, faster transactions and simpler consensus finalization and is focused on delivering interoperability across other blockchain ecosystems like {Ethereum}."
        },
        "polkadot": {
            "title": "What is {PolkadotJs}?",
            "description": "{PolkadotJs} extension is a browser extension available for Firefox and Chrome dedicated to managing accounts for Substrate-based chains, including {Sora}, {Polkadot} and {Kusama}. You can add, import, and export accounts and sign transactions or extrinsics that you have initiated from websites you have authorized."
        }
    },
    "node": {
        "errors": {
            "connection": "An error occurred while connecting to the node\n{address}\n",
            "network": "The node\n{address}\n is from the another network\n",
            "existing": "This node is already added: {title}\n"
        },
        "messages": {
            "connected": "Connection established with node\n{address}\n",
            "selectNode": "Please select node to connect from the node list"
        },
        "warnings": {
            "disconnect": "Connection to the node has been lost. Reconnecting..."
        }
    },
    "selectNodeDialog": {
        "title": "{Sora} Network node selection",
        "addNode": "Add custom node",
        "customNode": "Custom node",
        "howToSetupOwnNode": "How to setup your own {Sora} node",
        "select": "Select",
        "connected": "Connected",
        "selectNodeForEnvironment": "Select a node for {environment} environment:",
        "nodeTitle": "{chain} hosted by {name}",
        "messages": {
            "emptyName": "Please input the name of the node",
            "emptyAddress": "Please input the address of the node",
            "incorrectProtocol": "Address should starts from ws:\/\/ or wss:\/\/",
            "incorrectAddress": "Incorrect address"
        },
        "updateNode": "Update node"
    },
    "buttons": {
        "max": "MAX",
        "chooseToken": "Choose token",
        "chooseAToken": "Choose a token",
        "chooseTokens": "Choose tokens",
        "enterAmount": "Enter amount"
    },
    "transfers": {
        "from": "From",
        "to": "To"
    },
    "pageNotFound": {
        "title": "Page not found",
        "body": "404"
    },
    "metamask": "{Metamask}",
    "sora": {
        "Dev": "{Sora} Devnet",
        "Test": "{Sora} Testnet",
        "Prod": "{Sora} Mainnet",
        "Stage": "{Sora} Testnet"
    },
    "evm": {
        "main": "{Ethereum} Mainnet",
        "ropsten": "{Ethereum} Ropsten",
        "rinkeby": "{Ethereum} Rinkeby",
        "kovan": "{Ethereum} Kovan",
        "goerli": "{Ethereum} Goerli",
        "private": "Volta Testnet",
        "EWC": "Energy Web Chain"
    },
    "providers": {
        "metamask": "{Metamask}"
    },
    "about": {
        "title": "The DEX for the Interoperable Future.",
        "description": "Cross-chain exchange of assets, simple creation and listing of new assets, and the easiest swaps ever. The interoperable future of {Polkadot} is here and we are at the forefront!",
        "trading": {
            "title": "Faster Trading",
            "first": "{AppName} is a non-custodial, cross-chain AMM DEX protocol for swapping tokens based on {Polkadot} and {Kusama} relay chains, {Polkadot} and {Kusama} parachains, and blockchains directly connected via bridges.",
            "second": "{AppName} removes trusted intermediaries and provides the opportunity for faster trading",
            "third": "{AppName} is a community project and devs collaborate on the open source code using the"
        },
        "liquidity": {
            "title": "Boundless Liquidity",
            "first": "{AppName} combines multiple liquidity sources under a common liquidity aggregation algorithm, operating completely on-chain, in a trustless and decentralized way.",
            "second": "When traders call the swap function, the liquidity aggregation algorithm will fill orders using the best offers across all liquidity sources. Liquidity sources can be other DEXs, order books, or other API-driven sources.",
            "third": "Because {AppName} is an open-source project, anyone can add more liquidity sources by making contributions to the {AppName} codebase."
        },
        "swap": {
            "title": "Swap Any Token",
            "first": "Go beyond the limits of current DEXs by adding tokens from the {Polkadot} ecosystem as well as other blockchains.",
            "second": "Create, list and trade your own tokens on the {Sora} network.",
            "third": "Our core infrastructure uses Parity Substrate, which is more scalable than {Ethereum}, and does not use expensive mining for consensus."
        },
        "pswap": {
            "title": "PSWAP Tokens",
            "first": "PSWAP was created by community governance by voting on its release. It is a utility and governance token used to reward liquidity providers on {AppName}. Unlike most other reward tokens, PSWAP is burned with transactions and decreases in supply over time.",
            "second": "The {percent}% fee for every swap on the {AppName} DEX is used to buy back PSWAP tokens, which are then burned. At first, 90% of burned PSWAP tokens are reminted to allocate to liquidity providers, but with time this percentage will decrease to 35% after 4 years."
        },
        "links": {
            "first": {
                "title": "Become a {Sora} Validator",
                "desc": "Secure the future of the {Sora} network and decentralized apps like {AppName}, and earn rewards along the way by becoming a {Sora} validator."
            },
            "second": {
                "title": "Connect a Chain to {Sora}",
                "desc": "Grow the decentralized world economy by connecting more chains to {Sora} and {AppName} using the {Hashi} bridge protocol."
            }
        },
        "network": "{AppName} is built on the {Sora} Network, focusing on interoperability to connect the rest of the crypto ecosystem to {Polkadot}."
    },
    "exchange": {
        "Swap": "Swap",
        "Pool": "Pool",
        "balance": "Balance",
        "insufficientBalance": "@:insufficientBalanceText",
        "price": "Price",
        "transactionSubmitted": "Transaction submitted",
        "transactionMessage": "{firstToken} and {secondToken}",
        "confirm": "Confirm",
        "ok": "OK"
    },
    "swap": {
        "connectWallet": "@:connectWalletText",
        "estimated": "estimated",
        "slippageTolerance": "Slippage Tolerance",
        "minReceived": "Minimum Received",
        "maxSold": "Maximum Sold",
        "minReceivedTooltip": "Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.",
        "priceImpact": "Price Impact",
        "priceImpactTooltip": "The difference between the market price and estimated price due to trade size.",
        "liquidityProviderFee": "Liquidity Provider Fee",
        "liquidityProviderFeeTooltip": "A portion of each trade ({liquidityProviderFee}%) goes to liquidity providers as a protocol incentive.",
        "networkFee": "@:networkFeeText",
        "pairIsNotCreated": "@:pairIsNotCreated",
        "firstPerSecond": "@:firstPerSecond",
        "insufficientAmount": "Insufficient {tokenSymbol} amount",
        "insufficientLiquidity": "Insufficient liquidity",
        "confirmSwap": "Confirm swap",
        "swapOutputMessage": "Output is estimated. You will receive at least {transactionValue} or the transaction will revert.",
        "rewardsForSwap": "PSWAP Strategic Rewards",
        "swapInputMessage": "Input is estimated. You will sell maximum {transactionValue} or the transaction will revert.",
        "route": "Route",
        "errorFetching": "Error fetching the data"
    },
    "pool": {
        "connectWallet": "@:connectWalletText",
        "connectToWallet": "Connect an account to view your liquidity.",
        "liquidityNotFound": "No liquidity found.",
        "addLiquidity": "Add liquidity",
        "removeLiquidity": "Remove liquidity",
        "createPair": "Create a pair",
        "pooledToken": "{tokenSymbol} Pooled",
        "pairTokens": "{pair} Pool Tokens",
        "poolShare": "Your pool share",
        "unknownAsset": "@:unknownAssetText",
        "description": "When you add liquidity, you are given pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.",
        "strategicBonusApy": "Strategic Bonus APY"
    },
    "bridge": {
        "title": "{Hashi} Bridge",
        "info": "Convert tokens between the {Sora} and {Ethereum} networks.",
        "balance": "Balance",
        "connectWallet": "@:connectWalletText",
        "connected": "@:connectedText",
        "changeAccount": "@:changeAccountText",
        "changeNetwork": "@:changeNetworkText",
        "next": "Next",
        "connectWallets": "Connect wallets to view respective transaction history.",
        "soraNetworkFee": "{Sora} Network Fee",
        "ethereumNetworkFee": "{Ethereum} Network Fee",
        "tooltipValue": "@:comingSoonText",
        "total": "Total",
        "viewHistory": "View transactions history",
        "transactionSubmitted": "Transaction submitted",
        "transactionMessage": "{assetA} for {assetB}",
        "notRegisteredAsset": "Asset {assetSymbol} is not registered",
        "selectNetwork": "Select network",
        "networkInfo": "Bridge {Sora} Network with:",
        "ethereum": "{Ethereum}",
        "energy": "@:evm.EWC",
        "copy": "Copy network address",
        "soraAddress": "{Sora} address",
        "ethereumAddress": "{Ethereum} address"
    },
    "selectRegisteredAsset": {
        "title": "Select a token",
        "search": {
            "title": "Tokens",
            "placeholder": "Filter by Asset ID, Name or Ticker Symbol",
            "networkLabelSora": "{Sora} network tokens",
            "networkLabelEthereum": "{Ethereum} network mirror tokens",
            "emptyListMessage": "No results"
        },
        "customAsset": {
            "title": "Custom",
            "customInfo": "Important! Custom tokens must be registered in {Sora}.",
            "registerToken": "Register token",
            "addressPlaceholder": "Asset ID",
            "symbolPlaceholder": "Token symbol",
            "empty": "No tokens found",
            "alreadyAttached": "Token was already attached"
        }
    },
    "confirmBridgeTransactionDialog": {
        "confirmTransaction": "Confirm transaction",
        "insufficientBalance": "@:insufficientBalanceText",
        "changeNetwork": "@:changeNetworkText",
        "confirm": "@:confirmTransactionText",
        "buttonConfirm": "@:confirmText"
    },
    "bridgeTransaction": {
        "details": "{from} for {to}",
        "for": " for ",
        "steps": {
            "step": "{step} of 2",
            "step1": "1st",
            "step2": "2nd"
        },
        "status": {
            "pending": "{step} transactions pending...",
            "failed": "{step} transactions failed. @:(retryText).",
            "confirm": "Confirm 2nd of 2 transactions...",
            "complete": "Complete",
            "convertionComplete": "Conversion complete"
        },
        "statuses": {
            "waiting": "Waiting",
            "ready": "Ready",
            "pending": "Pending",
            "frozen": "Frozen",
            "failed": "Transaction failed",
            "done": "Complete",
            "waitingForConfirmation": "Waiting for confirmation..."
        },
        "viewInEtherscan": "View in {Etherscan}",
        "networkTitle": "{network} transaction",
        "transactionHash": "Transaction hash",
        "networkInfo": {
            "status": "Status",
            "date": "Date",
            "amount": "Amount",
            "transactionFee": "Transaction Fee",
            "total": "Total"
        },
        "successCopy": "Transaction hash is copied to the clipboard",
        "ethereum": "{Ethereum}",
        "sora": "{Sora}",
        "pending": "{network} transaction pending...",
        "retry": "@:retryText",
        "metamask": "{Metamask}",
        "confirm": "@:confirmTransactionText",
        "newTransaction": "Create new transaction",
        "changeNetwork": "@:changeNetworkText",
        "connectWallet": "@:connectWalletText",
        "changeAccount": "@:changeAccountText in {Metamask}",
        "expectedAddress": "Expected address in {Metamask}",
        "title": "Bridge Transaction",
        "expectedMetaMaskAddress": "Expected address in {Metamask}:",
        "allowToken": "Allow {AppName} to use your {tokenSymbol}",
        "approveToken": "Please note that it is only needed to approve the token once. If your extension has multiple token approval requests, make sure to only confirm the last one while rejecting the rest.",
        "blocksLeft": "{count} blocks left..."
    },
    "bridgeHistory": {
        "title": "History",
        "showHistory": "Show history",
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here.",
        "filterPlaceholder": "Filter by Asset ID or Ticker Symbol",
        "restoreHistory": "Restore history",
        "statusAction": "Action Needed"
    },
    "selectToken": {
        "title": "Select a token",
        "searchPlaceholder": "Filter by Asset ID, Name or Ticker Symbol",
        "emptyListMessage": "No results",
        "copy": "Copy Asset ID",
        "successCopy": "{symbol} Asset ID is copied to the clipboard",
        "assets": {
            "title": "Assets"
        },
        "custom": {
            "title": "Custom",
            "search": "Input Asset ID",
            "text": "CUSTOM TOKENS",
            "alreadyAttached": "This token was already attached",
            "notFound": "Token not found"
        }
    },
    "createPair": {
        "title": "Create a pair",
        "deposit": "Deposit",
        "balance": "Balance",
        "pricePool": "Prices and fees",
        "shareOfPool": "Share of pool",
        "firstPerSecond": "@:firstPerSecond",
        "firstSecondPoolTokens": "{first}-{second} Pool",
        "connect": "Connect wallet",
        "supply": "Supply",
        "yourPosition": "Your position",
        "yourPositionEstimated": "Your position (estimated)",
        "youWillReceive": "You will receive",
        "remove": "remove",
        "add": "ADD",
        "ok": "OK",
        "networkFee": "@:networkFeeText",
        "alreadyCreated": "Token pair is already created",
        "firstLiquidityProvider": "You are the first liquidity provider",
        "firstLiquidityProviderInfo": "The ratio of tokens you add will set the price of this pool.<br\/>Once you are happy with the rate click supply to review."
    },
    "confirmSupply": {
        "title": "Your pool share will be",
        "outputDescription": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "poolTokensBurned": "{first}-{second} Pool Tokens Burned",
        "price": "Price"
    },
    "addLiquidity": {
        "title": "Add liquidity",
        "pairIsNotCreated": "@:pairIsNotCreated",
        "firstPerSecond": "@:firstPerSecond"
    },
    "removeLiquidity": {
        "title": "Remove liquidity",
        "liquidity": "liquidity",
        "balance": "Balance",
        "amount": "Amount",
        "input": "Input",
        "output": "Output",
        "price": "Price",
        "remove": "Remove",
        "description": "Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.",
        "outputMessage": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "confirmTitle": "You will receive",
        "shareOfPool": "Share of pool after transaction",
        "locked": "{percent} of your pool is in staking"
    },
    "dexSettings": {
        "title": "Settings",
        "marketAlgorithm": "@.upper:marketAlgorithmText",
        "marketAlgorithmTooltip": {
            "main": " - option to choose between Primary Market (TBC), Secondary Market (XYK) or a combined smart algorithm for guaranteed best price for any given transaction."
        },
        "slippageTolerance": "SLIPPAGE TOLERANCE",
        "slippageToleranceHint": "Your transaction will revert if the price changes unfavorably by more than this percentage.",
        "slippageToleranceValidation": {
            "warning": "Your transaction may fail",
            "frontrun": "Your transaction may be frontrun",
            "error": "Enter a valid slippage percentage"
        },
        "custom": "CUSTOM",
        "transactionDeadline": "TRANSACTION DEADLINE",
        "transactionDeadlineHint": "Transaction will be cancelled if it is pending for more than this long.",
        "nodeAddress": "NODE ADDRESS",
        "ip": "IP",
        "port": "PORT",
        "min": "MIN",
        "marketAlgorithms": {
            "SMART": "{smartAlgorithm} liquidity routing ensures the best price for any transaction by combining only the best price options from all available markets. When available, Token Bonding Curve ({tbcAlgorithm}) will be used for liquidity as long as the asset price is more affordable than from other sources, upon which the {xycAlgorithm} pool is utilized.",
            "TBC": "{tbcAlgorithm} — buying only from the Token Bonding Curve (Primary Market). There is a possibility that the price can become unfavorable compared to the {xycAlgorithm} pool (Secondary Market), but the value received from the vested rewards might turn out to be much more favorable over time.",
            "XYK": "{xycAlgorithm} — buying only from the XYK Pool (Secondary Market). Traditional XYK pool swap."
        },
        "charts": "Charts",
        "сhartsDescription": "View charts for token prices"
    },
    "resultDialog": {
        "title": "Transaction submitted",
        "ok": "OK"
    },
    "rewards": {
        "title": "Claim Rewards",
        "changeAccount": "@:changeAccountText",
        "connected": "@:connectedText",
        "networkFee": "@:networkFeeText",
        "andText": "and",
        "claiming": {
            "pending": "Claiming...",
            "success": "Claimed successfully"
        },
        "transactions": {
            "confimation": "Confirm {order} of {total} transactions...",
            "success": "You will receive your rewards shortly",
            "failed": "{order} of {total} transactions failed. @:retryText"
        },
        "signing": {
            "extension": "{PolkadotJs} browser extension",
            "accounts": "your {Sora} and {Ethereum} accounts respectively"
        },
        "hint": {
            "connectExternalAccount": "Connect an {Ethereum} account to check for available PSWAP and VAL rewards.",
            "connectAccounts": "To claim your PSWAP and VAL rewards you need to connect both your {Sora} and {Ethereum} accounts.",
            "connectAnotherAccount": "Connect another {Ethereum} account to check for available PSWAP and VAL rewards.",
            "howToClaimRewards": "To claim your {symbols} rewards you need to sign {count} {transactions} in {destination}. Rewards will be deposited to your {Sora} account."
        },
        "action": {
            "connectWallet": "@:connectWalletText",
            "connectExternalWallet": "Connect {Ethereum} account",
            "signAndClaim": "Sign and claim",
            "pendingInternal": "{Sora} transaction pending...",
            "pendingExternal": "{Ethereum} transaction pending...",
            "retry": "@:retryText",
            "checkRewards": "Check",
            "insufficientBalance": "@:insufficientBalanceText"
        },
        "notification": {
            "empty": "No available claims for this account"
        },
        "events": {
            "XorErc20": "XOR ERC-20",
            "SoraFarmHarvest": "{Sora}.farm harvest",
            "NtfAirdrop": "NFT Airdrop",
            "LiquidityProvision": "Fees gained from liquidity provision",
            "BuyOnBondingCurve": "buying from the TBC",
            "MarketMakerVolume": "Market Making",
            "LiquidityProvisionFarming": "Farming"
        },
        "vested": "vested",
        "forText": "for",
        "totalVested": "Total rewards",
        "claimableAmountDoneVesting": "Claimable rewards",
        "groups": {
            "strategic": "Strategic Rewards",
            "external": "Rewards for the connected {Ethereum} account",
            "crowdloan": "Crowdloan rewards"
        },
        "Rewards": "Rewards",
        "ReferralProgram": "@:referralProgram.title"
    },
    "provider": {
        "default": "{Ethereum} provider",
        "metamask": "{Metamask}",
        "messages": {
            "checkExtension": "{name} extension is busy, please check it",
            "extensionLogin": "Please login to your {name} extension",
            "installExtension": "{name} extension is not found. Please install it!\n\nAlready installed extension? Please reload the page",
            "reloadPage": "Reload page"
        }
    },
    "selectLanguageDialog": {
        "title": "Language"
    },
    "tokens": {
        "symbol": "Symbol",
        "assetId": "Asset ID"
    },
    "memorandum": "{AppName} Memorandum and Terms of Services",
    "FAQ": "{AppName} FAQ",
    "connectedAccount": "Connected account",
    "selectNodeConnected": "Connected to: {chain}",
    "moonpayText": "MoonPay",
    "forText": "for",
    "moonpay": {
        "notifications": {
            "success": {
                "title": "Tokens purchased",
                "text": "Token purchase is finished. The {Hashi} bridge transaction will start automatically as soon as the tokens have been received in the connected {Ethereum} account. It is safe to close this window and continue using {AppName}. There will be a notification about the bridge transaction when ready."
            },
            "supportError": {
                "title": "Token not supported",
                "text": "Unfortunately the token purchased via @:moonpayText is not yet supported by the {Hashi} bridge in {AppName}. Normally only the supported tokens should be available for purchase via MoonPay in {AppName}, hence something must have gone wrong somewhere. Please don’t hesitate to let the community know about this case in the <a class=\"link\" href=\"https:\/\/t.me\/polkaswap\" target=\"_blank\" rel=\"nofollow noopener\" title=\"{AppName}\">{AppName} Telegram group<\/a>."
            },
            "feeError": {
                "title": "Not enough ETH for the bridge tx",
                "text": "Unfortunately the {Hashi} bridge transaction has failed due to there not being enough ETH to pay for the {Ethereum} network transation fees. Please add more ETH and try again."
            },
            "transactionError": {
                "title": "Transaction has failed",
                "text": "Unfortunately it appears that the @:moonpayText transaction has failed. Please try again. For @:moonpayText support go to <a class=\"link\" href=\"https:\/\/support.moonpay.com\" target=\"_blank\" rel=\"nofollow noopener\" title=\"@:moonpayText\">https:\/\/support.moonpay.com<\/a>"
            },
            "amountError": {
                "title": "Insufficient balance",
                "text": "Unfortunately the {Hashi} bridge transaction has failed due to there not being enough tokens for transaction. Please check your {Ethereum} account balance and try again."
            },
            "accountAddressError": {
                "title": "Wrong {Ethereum} account",
                "text": "Unfortunately, the {Hashi} bridge transaction failed due to the recipient address of the tokens in the @:moonpayText order does not match your current {Ethereum} account address. Please switch {Ethereum} account in extension and try again."
            }
        },
        "buttons": {
            "buy": "Buy Tokens",
            "history": "Purchase History",
            "transfer": "Start bridge",
            "view": "View bridge transaction"
        },
        "history": {
            "title": "Purchase history",
            "empty": "@:noDataText"
        },
        "confirmations": {
            "txReady": "Transaction Ready For Bridge"
        },
        "tooltips": {
            "transfer": "Tokens successfully purchased!\nClick to start the bridge transaction"
        }
    },
    "light": "Light",
    "dark": "Dark",
    "headerMenu": {
        "showBalances": "Show Balances",
        "hideBalances": "Hide Balances",
        "settings": "Settings",
        "switchTheme": "Switch to {theme} Mode",
        "switchLanguage": "Choose Language",
        "selectNode": "@:selectNodeText"
    },
    "sentText": "Sent",
    "learnMoreText": "Learn more",
    "marketMakerCountdown": {
        "title": "Market Maker Countdown",
        "blocks": "blocks",
        "daysLeft": "days left",
        "txs": "TXs",
        "volume": "MM TX volume",
        "description": "20 million PSWAP \/ month will be distributed to market makers with at least 500 tx \/ month valued over 1 XOR."
    },
    "confirmNextTxFailure": {
        "header": "Attention",
        "info": "Your XOR balance will be less than {fee} XOR after this transaction. You won’t be able to pay for the network fee for another transaction.",
        "payoff": "You would have to use the Bridge to get XOR from other networks, get sent XOR from another {Sora} account, or swap any other token already in your account into XOR.",
        "button": "Yes, I understand the risk"
    },
    "blockNumberText": "Block number",
    "referralProgram": {
        "title": "Referral Program",
        "connectAccount": "To invite users you need to connect your {Sora} account.",
        "bondedXOR": "XOR Bonded",
        "referralsNumber": "{number} referrals",
        "startInviting": "Bond XOR to refer others",
        "preview": "Invite new users and get 10% from their transaction fees.<br\/>To start, bond any amount of XOR. <a href=\"#\" target=\"_blank\" rel=\"nofollow noopener\" class=\"link\">Learn more<\/a>",
        "deposit": "Deposit",
        "balance": "Balance",
        "networkFee": "@:networkFeeText",
        "insufficientBalance": "@:insufficientBalanceText",
        "insufficientBondedBalance": "Insufficient bonded balance",
        "action": {
            "connectWallet": "@:connectWalletText",
            "empty": "Enter amount of {tokenSymbol}",
            "startInviting": "Bond {tokenSymbol} to start inviting",
            "bondMore": "Bond More",
            "bond": "Bond",
            "unbond": "Unbond",
            "copyLink": "Copy link"
        },
        "transactionDetails": "Transaction Details",
        "receivedRewards": "Received rewards",
        "invitationLink": "Invitation link",
        "successCopy": "Referral link is copied to the clipboard",
        "bondTitle": "Bond XOR",
        "unbondTitle": "Unbond XOR",
        "confirm": {
            "text": "Confirm",
            "bond": "Confirm bond",
            "unbond": "Confirm unbond",
            "inviteTitle": "You have been invited to {AppName}",
            "inviteDescription": "For every transaction, 10% of the fee will go to your referrer, without any extra cost to you.",
            "signInvitation": "Approve",
            "freeOfCharge": "This action is free of charge",
            "hasReferrerTitle": "You’ve already set your referrer",
            "hasReferrerDescription": "Unfortunately, you can only set one",
            "ok": "OK"
        },
        "referrer": {
            "title": "Add your referrer",
            "titleReferrer": "Your referrer",
            "placeholder": "Enter invitation link or code",
            "label": "Invitation link or code",
            "approve": "Approve",
            "approved": "Approved",
            "description": "You can get referred to {AppName},<br\/>type in the link or code of the referrer",
            "referredBy": "You’ve been referred by {referrer}",
            "info": "When you’ll pay a fee for transaction,<br\/>10% will go to your referrer",
            "referredLablel": "Referred address"
        },
        "insufficientBondedAmount": "To invite more referrals, bond at least {inviteUserFee} XOR"
    },
    "transactionDetailsText": "Transaction Details",
    "createTokenTextNFT": "Create NFT",
    "code": {
        "download": "Download QR Code",
        "upload": "Scan QR",
        "invalid": "Invalid QR Code",
        "import": "Import an image",
        "scan": "Scan with camera",
        "allowanceError": "Check your camera availability and browser permissions to use it",
        "receive": "Receive",
        "camera": "Camera",
        "allowanceRequest": "Press “Allow” access to camera"
    },
    "bridgeTransferNotification": {
        "addToken": "Add {symbol} to {Metamask}",
        "title": "Bridge transaction successful"
    },
    "mobilePopup": {
        "sideMenu": "Get {Sora} Wallet",
        "header": "Download {Sora} Wallet with {polkaswapHighlight} features",
        "info": "Swap tokens from different networks - {Sora}, {Ethereum}, {Polkadot}, {Kusama}. Provide liquidity pool and earn % from exchange fees."
    },
    "releaseNotesText": "Release notes",
    "copiedText": "Copied!",
    "copyWithValue": "Copy {value}",
    "copiedWithValue": "{value} is copied!",
    "signAndClaimText": "Sign and claim",
    "balanceText": "Balance",
    "unknownAssetText": "Unknown asset",
    "demeterFarming": {
        "staking": {
            "active": "Staking active",
            "inactive": "Stake to earn additional rewards",
            "stopped": "Staking stopped"
        },
        "info": {
            "earned": "{symbol} earned",
            "fee": "Fee",
            "feeTooltip": "Deposit fee is applied to your amount to stake",
            "owned": "{symbol} @:balanceText",
            "poolShare": "Your pool share staked",
            "poolShareWillBe": "Your pool share staked will be",
            "rewardToken": "Reward token",
            "stake": "Your {symbol} staked",
            "stakeWillBe": "Your {symbol} stake will be",
            "totalLiquidityLocked": "Total liquidity locked"
        },
        "actions": {
            "add": "Stake more",
            "claim": "Claim rewards",
            "remove": "Remove stake",
            "start": "Start staking"
        },
        "amountAdd": "Amount to stake",
        "amountRemove": "Amount to remove",
        "poweredBy": "Powered by Demeter Farming",
        "calculator": "Calculator",
        "results": "Results",
        "rewards": "{symbol} rewards"
    },
    "staking": {
        "title": "Staking"
    },
    "historyErrorMessages": {
        "generalError": "Something went wrong",
        "balances": {
            "liquidityrestrictions": "Account liquidity restrictions prevent withdrawal"
        },
        "poolxyk": {
            "sourcebalanceisnotlargeenough": "Source balance is not large enough",
            "targetbalanceisnotlargeenough": "Destination balance is not large enough",
            "impossibletodecidevalidpairvaluesfromrangeforthispool": "Provided amounts are too diverse",
            "calculatedvalueisnotmeetsrequiredboundaries": "Amounts are out of required bounds",
            "unabletodepositxorlessthanminimum": "XOR lower than the minimum value (0.007)",
            "zerovalueinamountparameter": "Amount parameter has zero value"
        },
        "xstpool": {
            "poolalreadyinitializedforpair": "Pool pair already exists",
            "slippagelimitexceeded": "Slippage tolerance has not met proper limits"
        },
        "referrals": {
            "alreadyhasreferrer": "Account already has a referrer",
            "referrerinsufficientbalance": "Referrer does not have enough of reserved balance"
        },
        "vestedrewards": {
            "rewardssupplyshortage": "Rewards program has already finished",
            "cantcalculatereward": "Failed to perform reward calculation",
            "norewardsforasset": "There are no rewards for this asset"
        },
        "liquidityproxy": {
            "forbiddenfilter": "Selected liquidity source is not allowed"
        },
        "demeterfarmingplatform": {
            "insufficientfunds": "Insufficient funds",
            "insufficientlptokens": "Insufficient liquidity provision tokens",
            "pooldoesnothaverewards": "Pool does not have rewards"
        },
        "multicollateralbondingcurvepool": {
            "pricecalculationfailed": "An error occurred while calculating the price"
        }
    },
    "receivedText": "Received",
    "browserNotificationDialog": {
        "title": "Enable browser notifications",
        "info": "We will send you only relevant updates about your wallet, for example: asset balance changes",
        "button": "Enable notifications",
        "agree": "Yes, I understand",
        "notificationBlocked": "To receive the notifications about {AppName}, please, allow the notifications in your browser's native settings",
        "pointer": "Press “Allow” to turn notifications on"
    },
    "assetDeposit": "Asset balance has been deposited",
    "noDataText": "No data",
    "ofText": "{first} of {second}",
    "filter": {
        "all": "All",
        "token": "Currencies",
        "verifiedOnly": "Show verified assets only",
        "zeroBalance": "Hide 0 balance assets",
        "showAssets": "Show assets",
        "show": "Show"
    },
    "desktop": {
        "welcome": {
            "header": "Welcome to {AppName}!",
            "headline": "Let’s set up your account",
            "text": "Create your {Sora} Network account or log into the old ones using mnemonic phrase or .json import. This allows you to securely sign transactions and manage assets in {Sora} Network.",
            "createAccount": "Create an account",
            "importAccount": "Import Account"
        },
        "heading": {
            "seedPhraseTitle": "Seed phrase",
            "confirmSeedTitle": "Confirm seed phrase",
            "accountDetailsTitle": "Account Details",
            "importTitle": "Import account"
        },
        "button": {
            "next": "Next step",
            "skip": "Skip",
            "createAccount": "Create Account",
            "importAccount": "Import account"
        },
        "accountName": {
            "placeholder": "Wallet name",
            "desc": "This is the public name of your wallet which will be visible to everyone"
        },
        "password": {
            "placeholder": "Password",
            "desc": "Ensure you are using a strong password for proper protection"
        },
        "confirmPassword": {
            "placeholder": "Confirm password"
        },
        "accountMnemonic": {
            "placeholder": "Mnemonic phrase"
        },
        "seedAdviceText": "This is a secret seed of your account. Make sure to store it on a non-digital carrier, for example - paper",
        "confirmSeedText": "Confirm the seed phrase by clicking words in the correct order",
        "errorMnemonicText": "Incorrect seed phrase order",
        "exportOptionText": "Export .json account file",
        "exportJsonText": "You will always be able to access your account by importing that .json file. Do not share it with anyone!",
        "addAccount": "Add an account",
        "dialog": {
            "confirmTitle": "Confirm with password",
            "confirmButton": "Sign Transaction",
            "savePasswordText": "Remember my password for next 15 minutes",
            "extendPasswordText": "Extend period without password by 15 minutes"
        },
        "errorMessages": {
            "password": "Password did not match",
            "passwords": "Passwords did not match",
            "mnemonic": "Invalid bip39 mnemonic specified",
            "mnemonicLength": "Mnemonic should contain {number} words",
            "jsonFields": "JSON file does not have required fields"
        }
    },
    "hashiBridgeText": "{Hashi} bridge",
    "disclaimerTitle": "Disclaimer:",
    "explore": {
        "showOnlyMyPositions": "Show only my positions"
    },
    "tooltips": {
        "roi": "{ROI} stands for Return on Investment. It is calculated by dividing the profit earned on an investment by the cost of that investment in a percentage equivalent.",
        "tvl": "{TVL} stands for Total Value Locked. It represents tokens locked in the pools in the dollar equivalent."
    }
}