{
    "acceptOnScrollText": "Scroll to accept",
    "acceptText": "Accept & Hide",
    "account": {
        "accountTitle": "Account",
        "copy": "Copy address",
        "delete": "Delete account",
        "export": "Export .json",
        "rename": "Rename account",
        "switch": "Switch account",
        "walletAddress": "Wallet address"
    },
    "accountAddressText": "Account address",
    "accountSettings": {
        "confirmation": {
            "description": "A popup screen which displays details about the transactions before the signing.",
            "title": "Disable transaction confirmation"
        },
        "disable": "Disable on",
        "disabled": "Disabled for",
        "enterPassword": "Enter password",
        "googleOnly": "{Google} accounts only",
        "hint": "You can enable this back in account settings",
        "signature": {
            "description": "Enable or disable the need to enter your password during the signature popup in transactions.",
            "title": "Disable password confirmation"
        },
        "title": "Account settings"
    },
    "accountText": "account | accounts",
    "addAsset": {
        "add": "Add",
        "AddAssetToken": {
            "switchBtn": "Verified assets only",
            "title": "Currencies"
        },
        "alreadyAttached": "Token was already attached",
        "approved": "Asset approved by community",
        "assetType": {
            "nft": "NFT | NFTs",
            "token": "token | tokens"
        },
        "empty": "No tokens found",
        "pinAsset": "Pin Asset",
        "scam": "SCAM",
        "searchInputText": "Search by Asset ID, Name or Ticker Symbol",
        "success": "Asset {symbol} was added successfully!",
        "understand": "I understand",
        "unknown": "Unknown source",
        "unpinAsset": "Unpin Asset",
        "warningMessage": "this {assetType} | these {assetTypePlural}",
        "warningMessageText": "Anyone can create a {assetType}, including creating fake versions of existing {assetTypePlural} that claim to represent projects.\nIf you purchase {purchaseAssetType}, you may not be able to sell it back.",
        "warningTitle": "Trade at your own risk!"
    },
    "addAssetsText": "Add asset | Add assets",
    "addAssetText": "Add asset",
    "addLiquidity": {
        "title": "Add liquidity"
    },
    "addressBook": {
        "addContact": "Add contact",
        "btn": {
            "enterName": "Enter name",
            "present": "Already present",
            "saveChanges": "Save changes"
        },
        "detected": "New address detected",
        "dialogTitle": "Your contacts",
        "identity": "On-chain identity",
        "input": "Input address or select contact",
        "myAccounts": "My accounts",
        "myBook": "My Book",
        "noContacts": "You don’t have any contacts added yet",
        "noFoundRecords": "No records found",
        "none": "None",
        "notSoraAddress": "This address will be saved as {Sora} address below. Make sure the recipient can access the {Sora} chain:",
        "options": {
            "delete": "Delete",
            "edit": "Edit contact",
            "send": "Send tokens"
        },
        "save": "Save as contact",
        "searchPlaceholder": "Search by address, name or identity",
        "selectContact": "Select contact",
        "tooltip": "Collect address book by providing name and address to keep your contacts organized and up-to-date"
    },
    "addressText": "Address",
    "alerts": {
        "alertFrequencyTitle": "Alert frequency",
        "alertsCreateTitle": "Set up price alert",
        "alertsTitle": "Alerts",
        "alertsTooltip": "Price alerts are notifications that can be set by you to receive updates when the price of a particular token reaches certain point you set",
        "alertTypeTitle": "Alert type",
        "always": "Always",
        "createBtn": "Create new price alert",
        "currentPrice": "current price",
        "delete": "Delete alert",
        "drop": "Drops below",
        "edit": "Edit alert",
        "enableSwitch": "Enable asset deposit notifications",
        "finishBtn": "Finish alert setup",
        "frequencyTooltip": "Select between 'once' and 'always' to determine how often you receive notifications for the chosen alert type. 'Once' will send a single notification when the condition is met, while 'always' will continue to notify you each time the price threshold is crossed",
        "noSupportMsg": "Notifications aren't supported by your browser",
        "once": "Once",
        "onDropDesc": "{token} drops below {price}",
        "onRaiseDesc": "{token} rises above {price}",
        "raise": "Rises above",
        "typeTooltip": "Choose either 'drops below' or 'rises above' option to specify alert condition for tracking important price movements. These options allow you receive timely notifications when the value of your asset either falls below or rises above your designated threshold"
    },
    "amountText": "Amount",
    "appName": "{AppName}",
    "asset": {
        "receive": "Receive {symbol}",
        "remove": "Remove asset",
        "select": "Select an asset"
    },
    "assetDeposit": "Asset balance has been deposited",
    "assets": {
        "assetId": "Asset ID",
        "balance": {
            "bonded": "Bonded",
            "frozen": "Frozen",
            "locked": "Locked",
            "reserved": "Reserved",
            "total": "Total",
            "transferable": "Transferable"
        },
        "bridge": "Bridge",
        "copied": "Copied!",
        "copy": "Copy Asset ID",
        "details": "Details",
        "empty": "There are no assets",
        "liquidity": "Add liquidity",
        "receive": "@:account.copy",
        "send": "@:sendText",
        "swap": "@:swapText",
        "totalAssetsValue": "Total assets value:"
    },
    "backText": "Back",
    "balanceText": "Balance",
    "blockNumberText": "Block number",
    "bridge": {
        "connectWallets": "Connect wallets to view respective transaction history.",
        "externalMinDeposit": "{network} min. deposit",
        "externalMinDepositTooltip": "Minimum balance {symbol} that must be on your {network} account after the bridge transfer",
        "externalTransferFee": "{network} {XCM} fee",
        "externalTransferFeeTooltip": "When you send a bridge transaction to the {network} network, a minor fee is taken from the amount you are transferring",
        "info": "Convert tokens between the {Sora} and {Ethereum} networks.",
        "limitMessage": "Currently, there's a {type} {amount} {symbol} for bridging to ensure the stability and security of the {Sora} Network. We appreciate your understanding.",
        "networkInfo": "Bridge {Sora} Network with:",
        "next": "Next",
        "notRegisteredAsset": "Asset {assetSymbol} is not registered",
        "selectNetwork": "Select network",
        "soraNetworkFee": "{Sora} Network Fee",
        "title": "Bridge"
    },
    "bridgeHistory": {
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here.",
        "filterPlaceholder": "Filter by Asset ID or Ticker Symbol",
        "restoreHistory": "Restore history",
        "showHistory": "Show history",
        "statusAction": "Action Needed",
        "title": "History"
    },
    "bridgeText": "Bridge",
    "bridgeTransaction": {
        "allowToken": "Allow {AppName} to use your {tokenSymbol}",
        "approveToken": "Please note that it is only needed to approve the token once. If your extension has multiple token approval requests, make sure to only confirm the last one while rejecting the rest.",
        "blocksLeft": "{count} blocks left...",
        "for": " for ",
        "networkInfo": {
            "amount": "Amount",
            "date": "Date",
            "status": "Status",
            "transactionFee": "Transaction Fee"
        },
        "newTransaction": "Create new transaction",
        "pending": "{network} transaction pending...",
        "statuses": {
            "done": "Complete",
            "failed": "Transaction failed",
            "pending": "Pending",
            "waitingForConfirmation": "Waiting for confirmation..."
        },
        "title": "Bridge Transaction",
        "transactionHash": "Transaction hash"
    },
    "bridgeTransferNotification": {
        "addToken": "Add {symbol} to wallet",
        "title": "Bridge transaction successful"
    },
    "browserNotificationDialog": {
        "agree": "Yes, I understand",
        "button": "Enable notifications",
        "info": "We will send you only relevant updates about your wallet, for example: asset balance changes",
        "notificationBlocked": "To receive the notifications about {AppName}, please, allow the notifications in your browser's native settings",
        "pointer": "Press “Allow” to turn notifications on",
        "rotateMessage": "The experience is only available in portrait mode",
        "rotatetitle": "Please, rotate your device",
        "title": "Set Notifications"
    },
    "browserNotificationLocalStorageOverride": {
        "agree": "Yes, I understand",
        "info": "Your local storage is overloaded, to continue work with {AppName} need to clean it",
        "title": "Clear local {AppName} storage"
    },
    "browserPermission": {
        "btnAllow": "Allow access",
        "btnGoToSettings": "Go to settings",
        "desc": "To ensure the authenticity of documents and validate user identity for KYC verification, access to your device's camera is required.",
        "disclaimer": "Camera access is required for real-time document capture to prevent fraud.",
        "title": "Allow camera access in browser settings"
    },
    "buttons": {
        "chooseAToken": "Choose a token",
        "chooseToken": "Choose token",
        "chooseTokens": "Choose tokens",
        "enterAmount": "Enter amount",
        "max": "MAX"
    },
    "calculatingText": "Calculating",
    "cancelText": "Cancel",
    "changeAccountText": "Change account",
    "changeNetworkText": "Change network in wallet",
    "closeText": "Close",
    "code": {
        "allowanceError": "Check your camera availability and browser permissions to use it",
        "allowanceRequest": "Press “Allow” to access camera",
        "camera": "Camera",
        "download": "Download QR Code",
        "import": "Import an image",
        "invalid": "Invalid QR Code",
        "receive": "Receive",
        "scan": "Scan with camera",
        "upload": "Scan QR"
    },
    "collapseText": "Collapse",
    "comingSoonText": "Coming Soon",
    "confirmNextTxFailure": {
        "button": "Yes, I understand the risk",
        "header": "Attention",
        "info": "Your XOR balance will be less than {fee} XOR after this transaction. You won’t be able to pay for the network fee for another transaction.",
        "payoff": "You would have to use the Bridge to get XOR from other networks, get sent XOR from another {Sora} account, or swap any other token already in your account into XOR."
    },
    "confirmSupply": {
        "outputDescription": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "title": "Your pool share will be"
    },
    "confirmText": "Confirm",
    "confirmTransactionText": "Confirm transaction",
    "connectedAccount": "Connected account",
    "connectedText": "Connected",
    "connectEthereumWalletText": "Connect {Ethereum} wallet",
    "connection": {
        "action": {
            "learnMore": "Learn more about wallet connection",
            "refresh": "Refresh"
        },
        "disclaimer": "Please note that certain wallets may not be fully supported.",
        "internalText": "You can create or import an existing {Sora} account to connect with your {wallet} account. All data that is stored by {wallet} is encrypted using built-in advanced encryption.",
        "internalTitle": "Connect with {wallet}",
        "list": {
            "extensions": "Extensions",
            "integrated": "Integrated"
        },
        "selectAccount": "Select account to work with",
        "wallet": {
            "connected": "Connected",
            "install": "Install",
            "recommended": "Recommended"
        }
    },
    "connectWalletText": "Connect account",
    "connectWalletTextTooltip": "Connect to {Sora} Network with {PolkadotJs}",
    "continueText": "Continue",
    "copiedText": "Copied!",
    "copiedWithValue": "{value} is copied!",
    "copyPhraseText": "Copy Passphrase",
    "copyWithValue": "Copy {value}",
    "createPair": {
        "deposit": "Deposit",
        "firstLiquidityProvider": "You are the first liquidity provider",
        "firstLiquidityProviderInfo": "The ratio of tokens you add will set the price of this pool.<br/>Once you are happy with the rate click supply to review.",
        "firstSecondPoolTokens": "{first}-{second} Pool",
        "pricePool": "Prices and fees",
        "shareOfPool": "Share of pool",
        "supply": "Supply",
        "yourPosition": "Your position"
    },
    "createToken": {
        "confirmTokenTitleCommon": "Create Token",
        "confirmTokenTitleNFT": "Create NFT",
        "CreateSimpleToken": "Token",
        "divisible": {
            "desc": "Ability of NFT to divide into fractional parts. Liquidity provisioning only works with divisible assets",
            "placeholder": "Divisible"
        },
        "enterName": "Enter token name",
        "enterSupply": "Enter token supply",
        "enterSymbol": "Enter token symbol",
        "enterTokenDescription": "Enter description",
        "error": "Failed to create {symbol} token",
        "extensibleSupply": {
            "desc": "Ability to mint more tokens.",
            "placeholder": "Extensible supply"
        },
        "nft": {
            "description": {
                "placeholder": "Description"
            },
            "image": {
                "placeholderBadSource": "The file failed to be processed",
                "placeholderBadSourceAddition": "or it’s not uploaded to IPFS yet",
                "placeholderFileLimit": "The file size exceeds the limit of {value}mb",
                "placeholderNoImage": "Upload the file by either entering a link or choosing from local storage"
            },
            "link": {
                "copyLink": "Copy link",
                "placeholder": "IPFS link",
                "tooltip": "IPFS is a distributed system for storing and accessing files, making it possible to access files from many locations that aren't managed by one organization."
            },
            "source": {
                "label": "Source",
                "limit": "Choose another file",
                "value": "Local files"
            },
            "supply": {
                "desc": "Amount of NFTs you’re going to get.",
                "placeholder": "Token supply",
                "quantity": "Quantity"
            }
        },
        "provideContent": "Provide content",
        "success": {
            "desc": "Create {symbol} token",
            "title": "Transaction submitted"
        },
        "titleCommon": "Create",
        "tokenName": {
            "desc": "This is a name for the token. You can use from 1 to 33 characters for the selection.",
            "placeholder": "Token name"
        },
        "tokenSupply": {
            "desc": "You will receive these tokens upon creation.",
            "placeholder": "Token supply"
        },
        "tokenSymbol": {
            "desc": "This is an identifier for the token. You can use from 1 to 7 characters for the selection.",
            "placeholder": "Token symbol"
        }
    },
    "createTokenText": "Create",
    "createTokenTextNFT": "Create NFT",
    "currencyDialog": {
        "currency": "Currency",
        "searchPlaceholder": "Search by currency name or symbol"
    },
    "customisePageText": "Customize page",
    "dark": "Dark",
    "desktop": {
        "accountMnemonic": {
            "placeholder": "Mnemonic phrase"
        },
        "accountName": {
            "desc": "This is the name of your account. It will be visible only to you in {AppName}.",
            "placeholder": "Account name"
        },
        "addAccount": "Add an account",
        "assetsAtRiskText": "Assets at risk!",
        "button": {
            "createAccount": "Create Account",
            "importAccount": "Import account",
            "next": "Next step",
            "skip": "Skip"
        },
        "confirmPassword": {
            "placeholder": "Confirm password"
        },
        "confirmSeedText": "Confirm the passphrase by clicking the words in the correct order",
        "deleteAccountText": "Account can’t be recovered without a seed phrase, .json file or if it’s stored in some extension. You will be logged out.",
        "dialog": {
            "confirmButton": "Sign Transaction",
            "confirmTitle": "Confirm with password"
        },
        "errorMessages": {
            "alreadyImported": "Account already imported {address}",
            "jsonFields": "JSON file does not have required fields",
            "mnemonic": "Invalid bip39 mnemonic specified",
            "mnemonicLength": "Mnemonic should contain {number} words",
            "password": "Password did not match",
            "passwords": "Passwords did not match"
        },
        "errorMnemonicText": "Incorrect passphrase order",
        "exportJsonText": "You will always be able to restore your account by importing this {JSON} file. Do not share it with anyone! Store it safely, preferably encrypted.",
        "exportOptionText": "Export {JSON} file for account restoration",
        "exportTutorialsText": "Export tutorials",
        "heading": {
            "accountDetailsTitle": "Account Details",
            "confirmSeedTitle": "Confirm passphrase",
            "importTitle": "Import account",
            "seedPhraseTitle": "Passphrase"
        },
        "importSteps": {
            "exportAccount": "Export the {JSON} file",
            "selectAccount": "Select the account you want to export",
            "selectWallet": "Open the wallet with your existing account(s)"
        },
        "password": {
            "desc": "Ensure you are using a strong unique password for proper protection (8 characters minimum)",
            "placeholder": "Password"
        },
        "seedAdviceAdditionText": "If someone asks you for your passphrase they are most likely trying to scam you and steal your assets!",
        "seedAdviceAdditionTitle": "Never share your passphrase with anyone!",
        "seedAdviceText": "The 12-word passphrase is a private key to regain access to your {Sora} account in case you lose access to your {wallet} account. Store it safely in the exact order it appears above.",
        "welcome": {
            "createAccount": "Create an account",
            "header": "Welcome to {AppName}!",
            "headline": "Let’s set up your account",
            "importAccount": "Import Account",
            "text": "Create your {Sora} Network account or log into the old ones using mnemonic phrase or .json import. This allows you to securely sign transactions and manage assets in {Sora} Network."
        }
    },
    "dexSettings": {
        "marketAlgorithm": "@.upper:marketAlgorithmText",
        "marketAlgorithms": {
            "SMART": "{smartAlgorithm} liquidity routing ensures the best price for any transaction by combining only the best price options from all available markets. When available, Token Bonding Curve ({tbcAlgorithm}) will be used for liquidity as long as the asset price is more affordable than from other sources, upon which the {xycAlgorithm} pool is utilized.",
            "TBC": "{tbcAlgorithm} — buying only from the Token Bonding Curve (Primary Market). There is a possibility that the price can become unfavorable compared to the {xycAlgorithm} pool (Secondary Market), but the value received from the vested rewards might turn out to be much more favorable over time.",
            "XYK": "{xycAlgorithm} — buying only from the XYK Pool (Secondary Market). Traditional XYK pool swap."
        },
        "marketAlgorithmTooltip": {
            "main": " - option to choose between Primary Market (TBC), Secondary Market (XYK) or a combined smart algorithm for guaranteed best price for any given transaction."
        },
        "slippageTolerance": "SLIPPAGE TOLERANCE",
        "slippageToleranceHint": "Your transaction will revert if the price changes unfavorably by more than this percentage.",
        "slippageToleranceValidation": {
            "error": "Enter a valid slippage percentage",
            "frontrun": "Your transaction may be frontrun",
            "warning": "Your transaction may fail"
        },
        "title": "Settings"
    },
    "disclaimer": "{disclaimerPrefix} This website is maintained by the {Sora} community. Before continuing to use this website, please review the {polkaswapFaqLink} and documentation, which includes a detailed explanation on how {AppName} works, as well as the {memorandumLink}, and {privacyLink}. These documents are crucial to a secure and positive user experience. By using {AppName}, you acknowledge that you have read and understand these documents. You also acknowledge the following: 1) your sole responsibility for compliance with all laws that may apply to your particular use of {AppName} in your legal jurisdiction; 2) your understanding that the current version of {AppName} is an alpha version: it has not been fully tested, and some functions may not perform as designed; and 3) your understanding and voluntary acceptance of the risks involved in using {AppName}, including, but not limited to, the risk of losing tokens. Please do not continue without reading the {polkaswapFaqLink}, {memorandumLink}, {privacyLink}!",
    "disclaimerTitle": "Disclaimer",
    "disconnectWalletText": "Disconnect",
    "doNotShowText": "Don’t show me this again",
    "dragAndDropText": "Drag & drop or choose {extension} file",
    "editText": "Edit",
    "errorText": "Error",
    "ethNetworkFeeTooltipText": "Please note that the {network} network fees displayed on {AppName} are only rough estimations, you can see the correct fee amount in your connected {network} wallet prior to confirming the transaction.",
    "exceededAmountText": "{amount} exceeded",
    "exchange": {
        "lossWarning": "You are going to lose {value}% on your trade. We've detected a liquidity provision issue. This may lead to significant losses during token swaps. Please ensure there is adequate liquidity for your desired swap pair.",
        "Swap": "Swap"
    },
    "expandText": "Expand",
    "explore": {
        "myPositions": "my positions",
        "showOnly": "Show only {entities}",
        "synthetics": "synthetic tokens"
    },
    "FAQ": "{AppName} FAQ",
    "fiatDisclaimer": "Please note that the fiat values associated with cryptocurrencies on our website are provided by external services (Subquery, Subsquid, Ceres API)  are approximate. Given the inherent complexity of these calculations, absolute precision at all times cannot be guaranteed.",
    "filter": {
        "all": "All",
        "native": "Native",
        "reset": "Reset",
        "show": "Show",
        "showAssets": "Show assets",
        "synthetics": "Synthetics",
        "token": "Currencies",
        "verifiedOnly": "Show verified assets only",
        "zeroBalance": "Hide 0 balance assets"
    },
    "firstPerSecond": "{first} per {second}",
    "firstText": "First",
    "footer": {
        "internet": {
            "action": "Refresh {AppName}",
            "desc": {
                "disabled": "Disconnected",
                "stable": "Optimal speed",
                "unstable": "Slow connection"
            },
            "dialogDesc": "{AppName} requires internet connection for stable experience",
            "dialogTitle": "Connect to internet source",
            "label": "Your internet speed",
            "title": {
                "disabled": "Internet disabled",
                "stable": "Internet stable",
                "unstable": "Internet unstable"
            }
        },
        "node": {
            "title": {
                "connected": "Node connected",
                "disconnected": "Node disconnected",
                "loading": "Node re-connecting"
            }
        },
        "statistics": {
            "action": "Select services",
            "desc": {
                "available": "All services are stable",
                "loading": "All services are loading",
                "unavailable": "All services are disconnected"
            },
            "dialog": {
                "indexer": "Indexer",
                "title": "{Sora} Network service selection",
                "useCeres": "Use {Ceres} for fiat values"
            },
            "label": "Statistics services",
            "title": {
                "available": "Statistics available",
                "loading": "Statistics loading",
                "unavailable": "Statistics unavailable"
            }
        }
    },
    "footerMenu": {
        "faucet": "Faucet",
        "github": "GitHub",
        "info": "Info & Community",
        "privacy": "Privacy Policy",
        "sorawiki": "{Sora} Wiki"
    },
    "forText": "for",
    "hashiBridgeText": "{Hashi} bridge",
    "headerMenu": {
        "hideBalances": "Hide Balances",
        "hideDisclaimer": "Hide Disclaimer",
        "selectCurrency": "Select Currency",
        "settings": "Settings",
        "showBalances": "Show Balances",
        "showDisclaimer": "Show Disclaimer",
        "switchTheme": "{theme} mode",
        "systemPreferencesTheme": "System preferences",
        "titleBalance": "Balances",
        "titleCurrency": "Fiat currency",
        "titleMisc": "Misc",
        "titleTheme": "Color theme",
        "turnPhoneHideBalances": "Turn phone & hide"
    },
    "helpDialog": {
        "appVersion": "{AppName} version",
        "contactUs": "Contact us",
        "privacyPolicy": "Privacy Policy",
        "termsOfService": "Terms of Service",
        "title": "Help"
    },
    "history": {
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here",
        "emptySearch": "No transactions found",
        "filterPlaceholder": "Filter by Address, Symbol, Type or Block ID"
    },
    "historyErrorMessages": {
        "balances": {
            "liquidityrestrictions": "Account liquidity restrictions prevent withdrawal"
        },
        "demeterfarmingplatform": {
            "insufficientfunds": "Insufficient funds",
            "insufficientlptokens": "Insufficient liquidity provision tokens",
            "pooldoesnothaverewards": "Pool does not have rewards"
        },
        "generalError": "Something went wrong",
        "liquidityproxy": {
            "forbiddenfilter": "Selected liquidity source is not allowed",
            "slippagenottolerated": "The price impact has exceeded the selected value"
        },
        "multicollateralbondingcurvepool": {
            "pricecalculationfailed": "An error occurred while calculating the price"
        },
        "poolxyk": {
            "calculatedvalueisnotmeetsrequiredboundaries": "Amounts are out of required bounds",
            "impossibletodecidevalidpairvaluesfromrangeforthispool": "Provided amounts are too diverse",
            "sourcebalanceisnotlargeenough": "Source balance is not large enough",
            "targetbalanceisnotlargeenough": "Destination balance is not large enough",
            "unabletodepositxorlessthanminimum": "XOR lower than the minimum value (0.007)",
            "zerovalueinamountparameter": "Amount parameter has zero value"
        },
        "referrals": {
            "alreadyhasreferrer": "Account already has a referrer",
            "referrerinsufficientbalance": "Referrer does not have enough of reserved balance"
        },
        "vestedrewards": {
            "cantcalculatereward": "Failed to perform reward calculation",
            "norewardsforasset": "There are no rewards for this asset",
            "rewardssupplyshortage": "Rewards program has already finished"
        },
        "xstpool": {
            "poolalreadyinitializedforpair": "Pool pair already exists",
            "slippagelimitexceeded": "Slippage tolerance has not met proper limits"
        }
    },
    "importText": "Import",
    "insufficientBalanceText": "Insufficient {tokenSymbol} balance",
    "lastText": "Last",
    "learnMoreText": "Learn more",
    "light": "Light",
    "locationText": "Location",
    "logoutText": "Log out",
    "mainMenu": {
        "Bridge": "@:bridgeText",
        "Swap": "Swap"
    },
    "marketAlgorithmText": "Market algorithm",
    "marketText": "Market",
    "maxAmountText": "max. amount",
    "memorandum": "{AppName} Memorandum and Terms of Services",
    "minAmountText": "min. amount",
    "mobilePopup": {
        "header": "Download {Sora} Wallet with {polkaswapHighlight} features",
        "info": "Swap tokens from different networks - {Sora}, {Ethereum}, {Polkadot}, {Kusama}. Provide liquidity pool and earn % from exchange fees.",
        "sideMenu": "Get {Sora} Wallet"
    },
    "moonpayText": "MoonPay",
    "multipleRecipients": "Multiple Recipients",
    "nameText": "Name",
    "networkFeeText": "Network Fee",
    "networkFeeTooltipText": "Network fee is used to ensure {Sora} system's growth and stable performance.",
    "networkStatisticsText": "Network statistics",
    "newAccountsText": "New accounts",
    "nextText": "Next",
    "noDataText": "No data",
    "node": {
        "errors": {
            "connection": "An error occurred while connecting to the node\n{address}\n",
            "existing": "This node is already added: {title}\n",
            "network": "The node\n{address}\n is from the another network\n"
        },
        "messages": {
            "connected": "Connection established with node\n{address}\n",
            "selectNode": "Please select node to connect from the node list"
        },
        "warnings": {
            "disconnect": "Connection to the node has been lost. Reconnecting..."
        }
    },
    "noir": "Noir",
    "ofText": "{first} of {second}",
    "operations": {
        "AddLiquidity": "Add Liquidity",
        "andText": "and",
        "BorrowVaultDebt": "Borrow Debt",
        "Burn": "Burn",
        "ClaimRewards": "Claim Rewards",
        "CloseVault": "Close Position",
        "CreatePair": "Create Pair",
        "CreateVault": "Create Position",
        "DemeterFarmingDepositLiquidity": "Stake Liquidity",
        "DemeterFarmingGetRewards": "Claim Rewards",
        "DemeterFarmingStakeToken": "Stake Token",
        "DemeterFarmingUnstakeToken": "Unstake Token",
        "DemeterFarmingWithdrawLiquidity": "Unstake Liquidity",
        "DepositCollateral": "Deposit Position",
        "error": {
            "AddLiquidity": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "BorrowVaultDebt": "Failed to borrow {amount} {symbol}",
            "Burn": "Failed to burn {amount} {symbol}",
            "ClaimRewards": "Failed to claim rewards {rewards}",
            "CloseVault": "Failed to close {symbol}/{symbol2} position",
            "CreatePair": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "CreateVault": "Failed to create {symbol}/{symbol2} position",
            "DemeterFarmingDepositLiquidity": "Failed to supply {amount} {symbol} and {symbol2} LP tokens",
            "DemeterFarmingGetRewards": "Failed to claim {symbol}",
            "DemeterFarmingStakeToken": "Failed to add {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Failed to remove {amount} {symbol}",
            "DemeterFarmingWithdrawLiquidity": "Failed to remove {amount} {symbol} and {symbol2} LP tokens",
            "DepositCollateral": "Failed to deposit {amount} {symbol}",
            "EthBridgeIncoming": "Failed to transfer {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Failed to transfer {amount} {symbol} from {Sora} to {Ethereum}",
            "Mint": "Failed to mint {amount} {symbol} to {address}",
            "OrderBookCancelLimitOrder": "Failed to cancel limit order",
            "OrderBookCancelLimitOrders": "Failed to cancel limit orders",
            "OrderBookPlaceLimitOrder": "Failed to place limit order of {amount} {symbol} at {price} {symbol2}",
            "ReferralReserveXor": "Failed to bond {amount} XOR",
            "ReferralSetInvitedUser": "Failed to set {role} {address}",
            "ReferralUnreserveXor": "Failed to unbond {amount} XOR",
            "RegisterAsset": "Failed to register {symbol} asset",
            "RemoveLiquidity": "Failed to remove {amount} {symbol} and {amount2} {symbol2}",
            "RepayVaultDebt": "Failed to repaid {amount} {symbol}",
            "StakingBond": "Failed to bond {amount} {symbol}",
            "StakingBondAndNominate": "Failed to bond {amount} {symbol}",
            "StakingBondExtra": "Failed to bond extra {amount} {symbol}",
            "StakingChill": "Failed to chill",
            "StakingNominate": "Failed to nominate validators",
            "StakingPayout": "Failed to payout rewards",
            "StakingRebond": "Failed to rebond {amount} {symbol}",
            "StakingSetController": "Failed to set controller {address}",
            "StakingSetPayee": "Failed to set payee {address}",
            "StakingUnbond": "Failed to unbond {amount} {symbol}",
            "StakingWithdrawUnbonded": "Failed to withdraw {amount} {symbol}",
            "Swap": "Failed to swap {amount} {symbol} for {amount2} {symbol2}",
            "SwapAndSend": "Failed to swap {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "SwapTransferBatch": "Failed to {action} {amount} {symbol}",
            "Transfer": "Failed to {action} {amount} {symbol} {direction} {address}",
            "VestedTransfer": "Failed to {action} {amount} {symbol} {direction} {address}"
        },
        "EthBridgeIncoming": "@:hashiBridgeText",
        "EthBridgeOutgoing": "@:hashiBridgeText",
        "finalized": {
            "AddLiquidity": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "BorrowVaultDebt": "Borrowed {amount} {symbol}",
            "Burn": "Burned {amount} {symbol}",
            "ClaimRewards": "Reward claimed successfully {rewards}",
            "CloseVault": "{symbol}/{symbol2} Position closed",
            "CreatePair": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "CreateVault": "{symbol}/{symbol2} Position created",
            "DemeterFarmingDepositLiquidity": "Supplied {symbol} and {symbol2} {amount} LP tokens",
            "DemeterFarmingGetRewards": "{amount} {symbol} claimed successfully",
            "DemeterFarmingStakeToken": "Added {amount} {symbol}",
            "DemeterFarmingUnstakeToken": "Removed {amount} {symbol}",
            "DemeterFarmingWithdrawLiquidity": "Removed {symbol} and {symbol2} {amount} LP tokens",
            "DepositCollateral": "Deposited {amount} {symbol}",
            "EthBridgeIncoming": "Transfered {amount} {symbol} from {Ethereum} to {Sora}",
            "EthBridgeOutgoing": "Transfered {amount} {symbol} from {Sora} to {Ethereum}",
            "Mint": "Minted {amount} {symbol} to {address}",
            "OrderBookCancelLimitOrder": "Limit order cancelled",
            "OrderBookCancelLimitOrders": "Limit orders cancelled",
            "OrderBookPlaceLimitOrder": "{side} {amount} {symbol} at {price} {symbol2} placed",
            "ReferralReserveXor": "Bonded {amount} XOR",
            "ReferralSetInvitedUser": "{role} {address} is set successfully",
            "ReferralUnreserveXor": "Unbonded {amount} XOR",
            "RegisterAsset": "Registered {symbol} asset",
            "RemoveLiquidity": "Removed {amount} {symbol} and {amount2} {symbol2}",
            "RepayVaultDebt": "Repaid {amount} {symbol}",
            "StakingBond": "Bonded {amount} {symbol}",
            "StakingBondAndNominate": "Bonded {amount} {symbol}",
            "StakingBondExtra": "Bonded extra {amount} {symbol}",
            "StakingChill": "Chill",
            "StakingNominate": "Nominated validators",
            "StakingPayout": "Payout rewards",
            "StakingRebond": "Rebonded {amount} {symbol}",
            "StakingSetController": "Set controller {address}",
            "StakingSetPayee": "Set payee {address}",
            "StakingUnbond": "Unbonded {amount} {symbol}",
            "StakingWithdrawUnbonded": "Withdrew {amount} {symbol}",
            "Swap": "Swapped {amount} {symbol} for {amount2} {symbol2}",
            "SwapAndSend": "Swapped {amount} {symbol} for {amount2} {symbol2} and {action} {direction} {address}",
            "SwapTransferBatch": "{action} {amount} {symbol}",
            "Transfer": "{action} {amount} {symbol} {direction} {address}",
            "VestedTransfer": "{action} {amount} {symbol} {direction} {address}"
        },
        "Mint": "Mint",
        "OrderBookCancelLimitOrder": "Cancel Order",
        "OrderBookCancelLimitOrders": "Cancel Orders",
        "OrderBookPlaceLimitOrder": "Place Order",
        "ReferralReserveXor": "Bond XOR",
        "ReferralSetInvitedUser": "Set {role}",
        "ReferralUnreserveXor": "Unbond XOR",
        "RegisterAsset": "Register Asset",
        "RemoveLiquidity": "Remove Liquidity",
        "RepayVaultDebt": "Repay Debt",
        "StakingBond": "Bond",
        "StakingBondAndNominate": "Bond and Nominate",
        "StakingBondExtra": "Bond Extra",
        "StakingChill": "Chill",
        "StakingNominate": "Nominate",
        "StakingPayout": "Payout Rewards",
        "StakingRebond": "Rebond",
        "StakingSetController": "Set Controller",
        "StakingSetPayee": "Set Payee",
        "StakingUnbond": "Unbond",
        "StakingWithdrawUnbonded": "Withdraw Unbonded",
        "Swap": "Swap",
        "SwapAndSend": "Swap and Send",
        "SwapTransferBatch": "{ADAR} transfer",
        "Transfer": "Transfer",
        "VestedTransfer": "Transfer"
    },
    "pageTitle": {
        "Bridge": "@:bridgeText",
        "Swap": "Swap"
    },
    "pairIsNotCreated": "Token pair isn't created",
    "polkadotjs": {
        "connectionError": "An error occured while connecting the wallet. You can try to connect the wallet via {extension} again",
        "noAccount": "{extension} account error. Please check your account in the {extension} extension",
        "noExtension": "No {extension} extension was found. Please install it and reload this page",
        "noExtensions": "No {PolkadotJs} extension was found. Please install it and reload this page\nhttps://polkadot.js.org/extension/",
        "noSigner": "Access denied. Go to {extension} extension settings and open \"Manage Website Access\" to allow."
    },
    "pool": {
        "addLiquidity": "Add liquidity",
        "connectToWallet": "Connect an account to view your liquidity.",
        "createPair": "Create a pair",
        "description": "When you add liquidity, you are given pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time.",
        "liquidityNotFound": "No liquidity found.",
        "pairTokens": "{pair} Pool Tokens",
        "pooledToken": "{tokenSymbol} Pooled",
        "poolShare": "Your pool share",
        "removeLiquidity": "Remove liquidity",
        "strategicBonusApy": "Strategic Bonus APY"
    },
    "poweredBy": "Powered by",
    "prevText": "Previous",
    "priceChartText": "Price chart",
    "priceText": "Price",
    "provider": {
        "messages": {
            "checkExtension": "{name} extension is busy, please check it",
            "extensionLogin": "Please login to your {name} extension",
            "installExtension": "{name} extension is not found. Please install it!\n\nAlready installed extension? Please reload the page",
            "notAvailable": "{name} is not available.",
            "reloadPage": "Reload page"
        }
    },
    "receivedText": "Received",
    "releaseNotesText": "Release notes",
    "removeLiquidity": {
        "amount": "Amount",
        "confirmTitle": "You will receive",
        "description": "Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.",
        "input": "Input",
        "liquidity": "liquidity",
        "locked": "{percent} of your pool is in {lock}",
        "output": "Output",
        "outputMessage": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "remove": "Remove",
        "shareOfPool": "Share of pool after transaction",
        "title": "Remove liquidity"
    },
    "resetText": "Reset",
    "retryText": "Retry",
    "rotatePhoneNotification": {
        "enableAcceleration": "Enable acceleration access in your settings.",
        "gyroscropePhone": " Our technology uses your phone's built-in gyroscope to instantly hide your balance when you tilt your device.",
        "info": "For extra privacy, tilt your device face down to instantly hide your asset balances. This feature uses your phone’s built-in sensors.",
        "title": "Turn your device upside down to hide balances"
    },
    "saveText": "Save",
    "searchText": "Search",
    "selectLanguageDialog": {
        "title": "Language"
    },
    "selectNodeConnected": "Connected to: {chain}",
    "selectNodeDialog": {
        "addNode": "Add custom node",
        "connected": "Connected",
        "customNode": "Custom node",
        "howToSetupOwnNode": "Setup your node",
        "messages": {
            "emptyAddress": "Please input the address of the node",
            "emptyName": "Please input the name of the node",
            "incorrectAddress": "Incorrect address",
            "incorrectProtocol": "Address should starts from ws:// or wss://"
        },
        "nodeTitle": "{chain} hosted by {name}",
        "select": "Select",
        "title": "Network node selection",
        "updateNode": "Update node"
    },
    "selectNodeText": "Select Network Node",
    "selectRegisteredAsset": {
        "search": {
            "networkLabelEthereum": "{network} network mirror tokens",
            "networkLabelSora": "{Sora} network tokens",
            "placeholder": "Filter by Asset ID, Name or Ticker Symbol"
        },
        "title": "Select a token"
    },
    "selectToken": {
        "assets": {
            "title": "Assets"
        },
        "custom": {
            "alreadyAttached": "This token was already attached",
            "notFound": "Token not found",
            "search": "Input Asset ID",
            "text": "CUSTOM TOKENS",
            "title": "Custom"
        },
        "emptyListMessage": "No results",
        "searchPlaceholder": "Filter by Asset ID, Name or Ticker Symbol",
        "title": "Select a token"
    },
    "sendText": "Send",
    "sentText": "Sent",
    "settingsText": "Settings",
    "signAndClaimText": "Sign and claim",
    "social": {
        "github": "GitHub",
        "medium": "Medium",
        "reddit": "Reddit",
        "telegram": "Telegram",
        "twitter": "Twitter",
        "wiki": "{Sora} Wiki"
    },
    "stepText": "Step",
    "successText": "Success",
    "swap": {
        "confirmSwap": "Confirm swap",
        "errorFetching": "Error fetching the data",
        "insufficientAmount": "Insufficient {tokenSymbol} amount",
        "insufficientLiquidity": "Insufficient liquidity",
        "liquidityProviderFee": "Liquidity Provider Fee",
        "liquidityProviderFeeTooltip": "A portion of each trade ({liquidityProviderFee}%) goes to liquidity providers as a protocol incentive.",
        "maxSold": "Maximum Sold",
        "minReceived": "Minimum Received",
        "minReceivedTooltip": "Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.",
        "priceImpact": "Price Impact",
        "priceImpactTooltip": "The difference between the market price and estimated price due to trade size.",
        "rewardsForSwap": "PSWAP Strategic Rewards",
        "route": "Route",
        "slippageTolerance": "Slippage Tolerance",
        "swapOutputMessage": "Output is estimated. You will receive at least {transactionValue} or the transaction will revert."
    },
    "swapText": "Swap",
    "tokens": {
        "assetId": "Asset ID"
    },
    "tooltips": {
        "accounts": "Accounts are digital addresses that hold user's assets on the network. Each account is associated with a unique public address and a private key that allows the user to access and manage their assets.",
        "bridgeTransactions": "{from} to {to} bridge refers to the process of transferring assets between the {from} and {to} networks using a bridge. The bridge allows for the interoperability of the two networks, enabling users to seamlessly move assets between them.",
        "fees": "Fees on the {Sora} blockchain refer to the charges that are incurred for executing transactions on the network. These fees are paid in XOR, the native cryptocurrency of the {Sora} Network. The fee amount is determined by the complexity and size of the transaction being executed",
        "roi": "{ROI} stands for Return on Investment. It is calculated by dividing the profit earned on an investment by the cost of that investment in a percentage equivalent.",
        "supply": "Token supply refers to the total number of tokens that have been created and are in circulation on the network. The token supply can fluctuate based on the amount of tokens being staked, burned, or transferred on the network.",
        "transactions": "Transactions refer to the process of sending or receiving digital assets on the network, including liquidity operations, as well as swaps.",
        "tvl": "{TVL} stands for Total Value Locked. It represents tokens locked in the pools in the dollar equivalent.",
        "velocity": "Token velocity is the number of times token changes accounts during period (month) on average. It indicates the level of trading activity and liquidity.",
        "volume": "Volume refers to the total amount of assets that have been traded or exchanged on the network over a specific period of time. The volume is an important metric for measuring the liquidity and overall activity of the network."
    },
    "transaction": {
        "amount": "@:amountText",
        "amount2": "@:amountText 2",
        "blockId": "Block Id",
        "comment": "Comment",
        "copy": "Copy {value}",
        "fee": "Transaction Fee",
        "from": "From",
        "history": {
            "confirmed": "Transaction confirmed",
            "created": "Transaction for {amount} {symbol} has been created.",
            "submitted": "Transaction submitted with fee of {fee} {symbol}"
        },
        "price": "Price",
        "referral": "Referral",
        "referrer": "Referrer",
        "side": "Side",
        "startTime": "Date",
        "status": "Status",
        "statuses": {
            "complete": "Complete",
            "failed": "Transaction failed",
            "pending": "Pending..."
        },
        "title": "Transaction details",
        "to": "To",
        "total": "Total",
        "txId": "Transaction Id",
        "viewIn": "View in {explorer}"
    },
    "transactionDetailsText": "Transaction Details",
    "transactionSubmittedText": "Transaction was submitted",
    "transactionText": "transaction | transactions",
    "transfers": {
        "from": "From",
        "to": "To"
    },
    "unknownAssetText": "Unknown asset",
    "unknownErrorText": "ERROR Something went wrong...",
    "wallet": {
        "WalletAssets": "Assets",
        "WalletHistory": "Activity"
    },
    "walletSend": {
        "addressError": "You cannot send tokens to the same account that you are currently connected to.",
        "addressWarning": "Tokens will be sent to the {Sora} address below. Make sure the recipient can access the {Sora} chain to use the tokens:",
        "badAddress": "Incorrect address",
        "balance": "Balance",
        "confirmTitle": "Confirm transaction",
        "enableVesting": "Enable token vesting",
        "enterAddress": "Enter address",
        "enterAmount": "Enter amount",
        "enterVestingPercentage": "Enter vesting percentage",
        "errorAddress": "Invalid address. Please check it and try again.",
        "max": "MAX",
        "startUnlockingDate": "Start unlocking date",
        "title": "Send",
        "tooltip": "Send tokens between {Sora} network accounts",
        "unlockFrequency": "Unlock frequency",
        "vestingPercentage": "Vesting percentage"
    },
    "warningText": "Warning"
}