{
    "closeText": "Close",
    "backText": "Back",
    "createWalletText": "Create wallet",
    "nameText": "Name",
    "nextText": "Next",
    "importText": "Import",
    "settingsText": "Settings",
    "addAssetText": "Add asset",
    "createTokenText": "Create token",
    "comingSoonText": "Coming Soon",
    "successText": "Success",
    "warningText": "Warning",
    "swapText": "Swap",
    "searchText": "Search",
    "cancelText": "Cancel",
    "saveText": "Save",
    "logoutText": "Log out",
    "sendText": "Send",
    "addressText": "Address",
    "amountText": "Amount",
    "confirmText": "Confirm",
    "errorText": "Error",
    "insufficientBalanceText": "Insufficient {tokenSymbol} balance",
    "unknownErrorText": "ERROR Something went wrong...",
    "transactionSubmittedText": "Transaction was submitted",
    "operations": {
        "Swap": "Swap",
        "Transfer": "Transfer",
        "AddLiquidity": "Add Liquidity",
        "RemoveLiquidity": "Remove Liquidity",
        "CreatePair": "Create Pair",
        "RegisterAsset": "Register Asset",
        "ClaimRewards": "Claim Rewards",
        "andText": "and",
        "finalized": {
            "Transfer": "Sent {amount} {symbol} to {address}",
            "Swap": "Swapped {amount} {symbol} for {amount2} {symbol2}",
            "AddLiquidity": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "RemoveLiquidity": "Removed {amount} {symbol} and {amount2} {symbol2}",
            "CreatePair": "Supplied {amount} {symbol} and {amount2} {symbol2}",
            "RegisterAsset": "Registered {symbol} asset",
            "ClaimRewards": "Reward claimed successfully {rewards}"
        },
        "error": {
            "Transfer": "Failed to send {amount} {symbol} to {address}",
            "Swap": "Failed to swap {amount} {symbol} for {amount2} {symbol2}",
            "AddLiquidity": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "RemoveLiquidity": "Failed to remove {amount} {symbol} and {amount2} {symbol2}",
            "CreatePair": "Failed to supply {amount} {symbol} and {amount2} {symbol2}",
            "RegisterAsset": "Failed to register {symbol} asset",
            "ClaimRewards": "Failed to claim rewards {rewards}"
        }
    },
    "polkadotjs": {
        "noExtensions": "No Polkadot.js extension was found. Please install it and reload this page\nhttps:\/\/polkadot.js.org\/extension\/",
        "noAccounts": "There seems to be no accounts in your Polkadot.js extension. Please add an account and try again.",
        "noAccount": "Polkadot.js account error. Please check your account in the Polkadot.js extension"
    },
    "connection": {
        "title": "SORA Network account",
        "text": "Connect your SORA Network accounts or create new ones with polkadot{.js} browser extension. This extension allows you to securely sign transactions and manage assets in SORA Network.",
        "install": "No polkadot.js extension found. Install it and <a href=\"#\" onclick=\"window.location.reload(true);\" class=\"wallet-connection-link\">reload<\/a> the page.<br\/><span class=\"wallet-connection-link\">https:\/\/polkadot.js.org\/extension\/<\/span>",
        "noPermissions": "Accidentally rejected permission request?<\/br>Currently polkadot{.js} extension doesnâ€™t have permission managment. As a workaround you can restart your browser and revisit this page to proceed with authorization.",
        "noAccounts": "No account found in your polkadot{.js} browser extension. Please add an account and try again.",
        "selectAccount": "Select account to work with",
        "loadingTitle": "Waiting for you to allow access to polkadot{.js} extension..",
        "action": {
            "install": "Install extension",
            "learnMore": "Learn more",
            "connect": "Connect account",
            "refresh": "Refresh"
        }
    },
    "wallet": {
        "title": "SORA Network account",
        "WalletAssets": "Assets",
        "WalletActivity": "Activity",
        "addAsset": "@:addAssetText",
        "createToken": "@:createTokenText"
    },
    "walletSend": {
        "title": "Send",
        "address": "@:addressText",
        "amount": "@:amountText",
        "balance": "Balance",
        "max": "MAX",
        "fee": "@:networkFeeText",
        "enterAddress": "Enter address",
        "badAddress": "Incorrect address",
        "enterAmount": "Enter amount",
        "badAmount": "@:insufficientBalanceText",
        "confirmTitle": "Confirm transaction",
        "confirm": "@:confirmText",
        "errorAddress": "Invalid address. Please check it and try again.",
        "feeTooltip": "@:networkFeeTooltipText",
        "tooltip": "Send tokens between SORA network accounts",
        "addressWarning": "Tokens will be sent to the SORA address below. Make sure the recipient can access the SORA chain to use the tokens:",
        "addressError": "You cannot send tokens to the same account that you are currently connected to."
    },
    "account": {
        "successCopy": "Wallet address is copied to the clipboard",
        "copy": "Copy address",
        "switch": "Switch account",
        "logout": "Logout"
    },
    "history": {
        "clearHistory": "Clear history",
        "filterPlaceholder": "Filter by Address, Symbol, Type or Block ID",
        "empty": "Your transactions will appear here",
        "emptySearch": "No transactions found"
    },
    "assets": {
        "empty": "There are no assets",
        "add": "@:addAssetText",
        "swap": "@:swapText",
        "send": "@:sendText",
        "receive": "@:account.copy",
        "liquidity": "Add liquidity",
        "bridge": "Bridge",
        "copy": "Copy Asset ID",
        "successCopy": "{symbol} Asset ID is copied to the clipboard",
        "copied": "Copied!",
        "balance": {
            "transferable": "Transferable",
            "frozen": "Frozen",
            "locked": " - Locked",
            "reserved": " - Reserved",
            "total": "Total"
        },
        "totalAssetsValue": "Your total assets value:"
    },
    "asset": {
        "remove": "Remove asset"
    },
    "addAsset": {
        "title": "@:addAssetText",
        "action": "@:addAssetText",
        "success": "Asset was added successfully!",
        "AddAssetSearch": {
            "title": "@:searchText",
            "placeholder": "Filter by Asset ID, Name or Ticker Symbol"
        },
        "AddAssetCustom": {
            "title": "Custom asset",
            "addressPlaceholder": "@:addressText",
            "symbolPlaceholder": "Asset symbol"
        },
        "empty": "No tokens found",
        "alreadyAttached": "Token was already attached",
        "understand": "I understand",
        "warningTitle": "Trade at your own risk!",
        "warningMessage": "Anyone can create a token, including creating fake versions of existing tokens that claim to represent projects.\nIf you purchase this token, you may not be able to sell it back.",
        "approved": "Asset approved by community",
        "unknown": "Unknown source",
        "scam": "SCAM",
        "next": "Next"
    },
    "createToken": {
        "title": "@:createTokenText",
        "desc": "Create and deploy custom asset on SORA",
        "action": "@:createTokenText",
        "enterSymbol": "Enter token symbol",
        "enterName": "Enter token name",
        "enterSupply": "Enter token supply",
        "confirm": "@:confirmText",
        "success": {
            "title": "Transaction submitted",
            "desc": "Create {symbol} token"
        },
        "tooltipValue": "@:networkFeeTooltipText",
        "fee": "@:networkFeeText",
        "insufficientBalance": "@:insufficientBalanceText",
        "feeError": "Failed to get a fee for a transaction",
        "error": "Failed to create {symbol} token",
        "tokenSymbol": {
            "placeholder": "Token symbol",
            "desc": "This is an identifier for the token. You can use from 1 to 7 characters for the selection."
        },
        "tokenName": {
            "placeholder": "Token name",
            "desc": "This is a name for the token. You can use from 1 to 33 characters for the selection."
        },
        "tokenSupply": {
            "placeholder": "Token supply",
            "desc": "You will receive these tokens upon creation."
        },
        "extensibleSupply": {
            "placeholder": "Extensible supply",
            "desc": "Ability to mint more tokens."
        }
    },
    "transaction": {
        "title": "Transaction details",
        "blockId": "Block Id",
        "status": "Status",
        "statuses": {
            "pending": "Pending...",
            "failed": "Transaction failed",
            "complete": "Complete"
        },
        "errorMessage": "Error",
        "startTime": "Date",
        "amount": "@:amountText",
        "amount2": "@:amountText 2",
        "fee": "Transaction Fee",
        "total": "Total",
        "from": "From",
        "to": "To",
        "viewInPolkascan": "View in Polkascan",
        "successCopy": "{value} is copied to the clipboard",
        "copy": "Copy {value}",
        "history": {
            "created": "Transaction for {amount} {symbol} has been created.",
            "submitted": "Transaction submitted with fee of {fee} {symbol}",
            "confirmed": "Transaction confirmed"
        },
        "viewInSorascan": "View in SORAScan",
        "txId": "Transaction Id"
    },
    "appName": "Polkaswap",
    "soraText": "SORA",
    "ethereumText": "Ethereum",
    "changeNetworkText": "Change network in Metamask",
    "transactionText": "transaction | transactions",
    "connectWalletText": "Connect account",
    "changeAccountText": "Change account",
    "connectedText": "Connected",
    "connectWalletTextTooltip": "Connect to @:soraText Network with polkadot{.js}",
    "selectNodeText": "Select node",
    "bridgeText": "Bridge",
    "disclaimer": "<span class=\"app-disclaimer__title\">Disclaimer<\/span>: This website is maintained by the @:soraText community. Before continuing to use this website, please review the @:polkaswapFaqLink and documentation, which includes a detailed explanation on how Polkaswap works, as well as the @:memorandumLink, and @:(privacyLink). These documents are crucial to a secure and positive user experience. By using Polkaswap, you acknowledge that you have read and understand these documents. You also acknowledge the following: 1) your sole responsibility for compliance with all laws that may apply to your particular use of Polkaswap in your legal jurisdiction; 2) your understanding that the current version of Polkaswap is an alpha version: it has not been fully tested, and some functions may not perform as designed; and 3) your understanding and voluntary acceptance of the risks involved in using Polkaswap, including, but not limited to, the risk of losing tokens. Once more, please do not continue without reading the @:polkaswapFaqLink, @:memorandumLink, and @:privacyLink!",
    "polkaswapFaqLink": "<a class=\"link\" href=\"https:\/\/wiki.sora.org\/polkaswap\/polkaswap-faq\" target=\"_blank\" rel=\"nofollow noopener\" title=\"@:FAQ\">@:FAQ<\/a>",
    "poweredBy": "Powered by",
    "confirmTransactionText": "Confirm transaction in {direction}",
    "retryText": "Retry",
    "networkFeeText": "Network Fee",
    "networkFeeTooltipText": "Network fee is used to ensure @:soraText system's growth and stable performance.",
    "ethNetworkFeeTooltipText": "Please note that the Ethereum network fees displayed on Polkaswap are only rough estimations, you can see the correct fee amount in your connected Ethereum wallet prior to confirming the transaction.",
    "marketText": "Market",
    "marketAlgorithmText": "Market algorithm",
    "firstPerSecond": "{first} per {second}",
    "pairIsNotCreated": "Token pair isn't created",
    "pageTitle": {
        "Swap": "Swap",
        "Pool": "Pool",
        "Bridge": "@:bridgeText",
        "About": "About",
        "Stats": "Stats",
        "Support": "Support",
        "Wallet": "Wallet",
        "CreatePair": "Create Pair",
        "AddLiquidity": "Add Liquidity",
        "AddLiquidityId": "Add Liquidity",
        "RemoveLiquidity": "Remove Liquidity",
        "PageNotFound": "Page Not Found"
    },
    "mainMenu": {
        "Swap": "Swap",
        "Pool": "Pool",
        "Bridge": "@:bridgeText",
        "Farming": "Farming",
        "Wallet": "Account",
        "Rewards": "Rewards",
        "About": "About",
        "Stats": "Stats",
        "Support": "Support",
        "CreatePair": "Create Pair",
        "Tokens": "Tokens"
    },
    "social": {
        "twitter": "Twitter",
        "telegram": "Telegram",
        "medium": "Medium",
        "reddit": "Reddit",
        "github": "GitHub"
    },
    "footerMenu": {
        "faucet": "Faucet",
        "github": "GitHub",
        "sorawiki": "@:soraText Wiki",
        "memorandum": "Polkaswap Memorandum and Terms of Services",
        "privacy": "Privacy Policy"
    },
    "helpDialog": {
        "title": "Help",
        "termsOfService": "Terms of Service",
        "privacyPolicy": "Privacy Policy",
        "termsOfServiceLink": "https:\/\/www.notion.so\/Polkaswap-Memorandum-and-Terms-of-Services-dc7f815a6d0a497a924832cc9bda17b8",
        "privacyPolicyLink": "https:\/\/www.notion.so\/Polkaswap-Privacy-Policy-d0f26456f2974f0d94734b19f6e5fc70",
        "appVersion": "@:appName version",
        "contactUs": "Contact us"
    },
    "aboutNetworkDialog": {
        "title": "About",
        "learnMore": "Learn more",
        "network": {
            "title": "What is @:(soraText)?",
            "description": "Polkaswap is built on top of the @:soraText Network, and the @:soraText token (XOR) is used for gas\/fees and liquidity provision on Polkaswap. @:soraText Network allows for reduced fees, faster transactions and simpler consensus finalization and is focused on delivering interoperability across other blockchain ecosystems like @:(ethereumText)."
        },
        "polkadot": {
            "title": "What is polkadot{.js}?",
            "description": "Polkadot{.js} extension is a browser extension available for Firefox and Chrome dedicated to managing accounts for Substrate-based chains, including @:(soraText), Polkadot and Kusama. You can add, import, and export accounts and sign transactions or extrinsics that you have initiated from websites you have authorized."
        }
    },
    "node": {
        "errors": {
            "connection": "An error occurred while connecting to the node\n{address}\n",
            "network": "The node\n{address}\n is from the another network\n",
            "existing": "This node is already added: '{title}'\n"
        },
        "messages": {
            "connected": "Connection estabilished with node\n{address}\n",
            "selectNode": "Please select node to connect from the node list"
        },
        "warnings": {
            "disconnect": "Ð¡onnection to the node has been lost. Reconnecting..."
        }
    },
    "selectNodeDialog": {
        "title": "@:soraText Network node selection",
        "addNode": "Add custom node",
        "customNode": "Custom node",
        "howToSetupOwnNode": "How to setup your own @:soraText node",
        "select": "Select",
        "connected": "Connected",
        "selectNodeForEnvironment": "Select a node for {environment} environment:",
        "nodeTitle": "{chain} hosted by {name}",
        "messages": {
            "emptyName": "Please input the name of the node",
            "emptyAddress": "Please input the address of the node",
            "incorrectProtocol": "Address should starts from ws:\/\/ or wss:\/\/",
            "incorrectAddress": "Incorrect address"
        },
        "updateNode": "Update node"
    },
    "buttons": {
        "max": "MAX",
        "chooseToken": "Choose token",
        "chooseAToken": "Choose a token",
        "chooseTokens": "Choose tokens",
        "enterAmount": "Enter amount"
    },
    "transfers": {
        "from": "From",
        "to": "To"
    },
    "pageNotFound": {
        "title": "Page not found",
        "body": "404"
    },
    "metamask": "MetaMask",
    "sora": {
        "Devnet": "@:soraText Devnet",
        "Testnet": "@:soraText Testnet",
        "Mainnet": "@:soraText Mainnet"
    },
    "evm": {
        "main": "Ethereum Mainnet",
        "ropsten": "Ethereum Ropsten",
        "rinkeby": "Ethereum Rinkeby",
        "kovan": "Ethereum Kovan",
        "goerli": "Ethereum Goerli",
        "private": "Volta Testnet",
        "EWC": "Energy Web Chain"
    },
    "providers": {
        "metamask": "@:metamask"
    },
    "about": {
        "title": "The DEX for the Interoperable Future.",
        "description": "Cross-chain exchange of assets, simple creation and listing of new assets, and the easiest swaps ever. The interoperable future of Polkadot is here and we are at the forefront!",
        "trading": {
            "title": "Faster Trading",
            "first": "Polkaswap is a non-custodial, cross-chain AMM DEX protocol for swapping tokens based on Polkadot and Kusama relay chains, Polkadot and Kusama parachains, and blockchains directly connected via bridges.",
            "second": "Polkaswap removes trusted intermediaries and provides the opportunity for faster trading",
            "third": "Polkaswap is a community project and devs collaborate on the open source code using the"
        },
        "liquidity": {
            "title": "Boundless Liquidity",
            "first": "Polkaswap combines multiple liquidity sources under a common liquidity aggregation algorithm, operating completely on-chain, in a trustless and decentralized way.",
            "second": "When traders call the swap function, the liquidity aggregation algorithm will fill orders using the best offers across all liquidity sources. Liquidity sources can be other DEXs, order books, or other API-driven sources.",
            "third": "Because Polkaswap is an open-source project, anyone can add more liquidity sources by making contributions to the Polkaswap codebase."
        },
        "swap": {
            "title": "Swap Any Token",
            "first": "Go beyond the limits of current DEXs by adding tokens from the Polkadot ecosystem as well as other blockchains.",
            "second": "Create, list and trade your own tokens on the SORA network.",
            "third": "Our core infrastructure uses Parity Substrate, which is more scalable than Ethereum, and does not use expensive mining for consensus."
        },
        "pswap": {
            "title": "PSWAP Tokens",
            "first": "PSWAP was created by community governance by voting on its release. It is a utility and governance token used to reward liquidity providers on Polkaswap. Unlike most other reward tokens, PSWAP is burned with transactions and decreases in supply over time.",
            "second": "The {percent}% fee for every swap on the Polkaswap DEX is used to buy back PSWAP tokens, which are then burned. At first, 90% of burned PSWAP tokens are reminted to allocate to liquidity providers, but with time this percentage will decrease to 35% after 4 years."
        },
        "links": {
            "first": {
                "title": "Become a SORA Validator",
                "desc": "Secure the future of the SORA network and decentralized apps like Polkaswap, and earn rewards along the way by becoming a SORA validator."
            },
            "second": {
                "title": "Connect a Chain to SORA",
                "desc": "Grow the decentralized world economy by connecting more chains to SORA and Polkaswap using the HASHI bridge protocol."
            }
        },
        "network": "Polkaswap is built on the SORA Network, focusing on interoperability to connect the rest of the crypto ecosystem to Polkadot."
    },
    "exchange": {
        "Swap": "Swap",
        "Pool": "Pool",
        "balance": "Balance",
        "insufficientBalance": "@:insufficientBalanceText",
        "price": "Price",
        "transactionSubmitted": "Transaction submitted",
        "transactionMessage": "{firstToken} and {secondToken}",
        "confirm": "Confirm",
        "ok": "OK"
    },
    "swap": {
        "connectWallet": "@:connectWalletText",
        "estimated": "estimated",
        "slippageTolerance": "Slippage Tolerance",
        "minReceived": "Minimum Received",
        "maxSold": "Maximum Sold",
        "minReceivedTooltip": "Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.",
        "priceImpact": "Price Impact",
        "priceImpactTooltip": "The difference between the market price and estimated price due to trade size.",
        "liquidityProviderFee": "Liquidity Provider Fee",
        "liquidityProviderFeeTooltip": "A portion of each trade ({liquidityProviderFee}%) goes to liquidity providers as a protocol incentive.",
        "networkFee": "@:networkFeeText",
        "pairIsNotCreated": "@:pairIsNotCreated",
        "networkFeeTooltip": "@:networkFeeTooltipText",
        "firstPerSecond": "@:firstPerSecond",
        "insufficientAmount": "Insufficient {tokenSymbol} amount",
        "insufficientLiquidity": "Insufficient liquidity",
        "confirmSwap": "Confirm swap",
        "swapOutputMessage": "Output is estimated. You will receive at least {transactionValue} or the transaction will revert.",
        "rewardsForSwap": "PSWAP Strategic Rewards",
        "swapInputMessage": "Input is estimated. You will sell maximum {transactionValue} or the transaction will revert."
    },
    "pool": {
        "connectWallet": "@:connectWalletText",
        "connectToWallet": "Connect an account to view your liquidity.",
        "liquidityNotFound": "No liquidity found.",
        "addLiquidity": "Add liquidity",
        "removeLiquidity": "Remove liquidity",
        "createPair": "Create a pair",
        "pooledToken": "{tokenSymbol} Pooled",
        "pairTokens": "{pair} Pool Tokens",
        "poolShare": "Your pool share",
        "unknownAsset": "Unknown asset",
        "description": "When you add liquidity, you are given pool tokens representing your position. These tokens automatically earn fees proportional to your share of the pool, and can be redeemed at any time."
    },
    "bridge": {
        "title": "HASHI Bridge",
        "info": "Convert tokens between the @:soraText and @:ethereumText networks.",
        "balance": "Balance",
        "connectWallet": "@:connectWalletText",
        "connected": "@:connectedText",
        "changeAccount": "@:changeAccountText",
        "changeNetwork": "@:changeNetworkText",
        "next": "Next",
        "connectWallets": "Connect wallets to view respective transaction history.",
        "soraNetworkFee": "@:soraText Network Fee",
        "ethereumNetworkFee": "@:ethereumText Network Fee",
        "tooltipValue": "@:comingSoonText",
        "total": "Total",
        "viewHistory": "View transactions history",
        "transactionSubmitted": "Transaction submitted",
        "transactionMessage": "{assetA} for {assetB}",
        "notRegisteredAsset": "Asset {assetSymbol} is not registered",
        "selectNetwork": "Select network",
        "networkInfo": "Bridge @:soraText Network with:",
        "ethereum": "@:ethereumText",
        "energy": "@:evm.EWC"
    },
    "selectRegisteredAsset": {
        "title": "Select a token",
        "search": {
            "title": "Tokens",
            "placeholder": "Filter by Asset ID, Name or Ticker Symbol",
            "networkLabelSora": "@:soraText network tokens",
            "networkLabelEthereum": "@:ethereumText network mirror tokens",
            "emptyListMessage": "No results"
        },
        "customAsset": {
            "title": "Custom",
            "customInfo": "Important! Custom tokens must be registered in @:(soraText).",
            "registerToken": "Register token",
            "addressPlaceholder": "Asset ID",
            "symbolPlaceholder": "Token symbol",
            "empty": "No tokens found",
            "alreadyAttached": "Token was already attached"
        }
    },
    "confirmBridgeTransactionDialog": {
        "confirmTransaction": "Confirm transaction",
        "insufficientBalance": "@:insufficientBalanceText",
        "changeNetwork": "@:changeNetworkText",
        "metamask": "@:metamask",
        "sora": "@:soraText",
        "confirm": "@:confirmTransactionText",
        "buttonConfirm": "@:confirmText"
    },
    "bridgeTransaction": {
        "details": "{from} for {to}",
        "for": " for ",
        "steps": {
            "step": "{step} of 2",
            "step1": "1st",
            "step2": "2nd"
        },
        "status": {
            "pending": "{step} transactions pending...",
            "failed": "{step} transactions failed. @:(retryText).",
            "confirm": "Confirm 2nd of 2 transactions...",
            "complete": "Complete",
            "convertionComplete": "Conversion complete"
        },
        "statuses": {
            "waiting": "Waiting",
            "ready": "Ready",
            "pending": "Pending",
            "frozen": "Frozen",
            "failed": "Transaction failed",
            "done": "Complete",
            "waitingForConfirmation": "Waiting for confirmation..."
        },
        "wait30Block": "Please wait 30 block confirmations",
        "viewInEtherscan": "View in Etherscan",
        "networkTitle": "{network} transaction",
        "transactionHash": "Transaction hash",
        "networkInfo": {
            "status": "Status",
            "date": "Date",
            "amount": "Amount",
            "transactionFee": "Transaction Fee",
            "total": "Total"
        },
        "successCopy": "Transaction hash is copied to the clipboard",
        "ethereum": "@:ethereumText",
        "sora": "@:soraText",
        "pending": "<span class=\"network-title\">{network}<\/span> transaction pending...",
        "retry": "@:retryText",
        "metamask": "@:metamask",
        "confirm": "@:confirmTransactionText",
        "newTransaction": "Create new transaction",
        "changeNetwork": "@:changeNetworkText",
        "connectWallet": "@:connectWalletText",
        "viewInSorascan": "View in SORAScan",
        "changeAccount": "@:changeAccountText in @:metamask",
        "expectedAddress": "Expected address in @:metamask",
        "title": "Bridge Transaction",
        "expectedMetaMaskAddress": "Expected address in MetaMask:",
        "allowToken": "Allow @:appName to use your {tokenSymbol}",
        "approveToken": "Please note that it is only needed to approve the token once. If your extension has multiple token approval requests, make sure to only confirm the last one while rejecting the rest."
    },
    "months": {
        "0": "Jan",
        "1": "Feb",
        "2": "Mar",
        "3": "Apr",
        "4": "May",
        "5": "Jun",
        "6": "Jul",
        "7": "Aug",
        "8": "Sep",
        "9": "Oct",
        "10": "Nov",
        "11": "Dec"
    },
    "bridgeHistory": {
        "title": "History",
        "showHistory": "Show history",
        "clearHistory": "Clear history",
        "empty": "Your transactions will appear here.",
        "filterPlaceholder": "Filter by Asset ID or Ticker Symbol",
        "restoreHistory": "Restore history"
    },
    "selectToken": {
        "title": "Select a token",
        "searchPlaceholder": "Filter by Asset ID, Name or Ticker Symbol",
        "emptyListMessage": "No results",
        "copy": "Copy Asset ID",
        "successCopy": "{symbol} Asset ID is copied to the clipboard",
        "assets": {
            "title": "Assets"
        },
        "custom": {
            "title": "Custom",
            "search": "Input Asset ID",
            "text": "CUSTOM TOKENS",
            "alreadyAttached": "This token was already attached",
            "notFound": "Token not found"
        }
    },
    "createPair": {
        "title": "Create a pair",
        "deposit": "Deposit",
        "balance": "Balance",
        "pricePool": "Prices and fees",
        "shareOfPool": "Share of pool",
        "firstPerSecond": "@:firstPerSecond",
        "firstSecondPoolTokens": "{first}-{second} Pool",
        "connect": "Connect wallet",
        "supply": "Supply",
        "yourPosition": "Your position",
        "yourPositionEstimated": "Your position (estimated)",
        "youWillReceive": "You will receive",
        "remove": "remove",
        "add": "ADD",
        "ok": "OK",
        "networkFee": "@:networkFeeText",
        "alreadyCreated": "Token pair is already created",
        "firstLiquidityProvider": "You are the first liquidity provider",
        "firstLiquidityProviderInfo": "The ratio of tokens you add will set the price of this pool.<br\/>Once you are happy with the rate click supply to review."
    },
    "confirmSupply": {
        "title": "Your pool share will be",
        "outputDescription": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "poolTokensBurned": "{first}-{second} Pool Tokens Burned",
        "price": "Price"
    },
    "addLiquidity": {
        "title": "Add liquidity",
        "pairIsNotCreated": "@:pairIsNotCreated",
        "firstPerSecond": "@:firstPerSecond"
    },
    "removeLiquidity": {
        "title": "Remove liquidity",
        "liquidity": "liquidity",
        "balance": "Balance",
        "amount": "Amount",
        "input": "Input",
        "output": "Output",
        "price": "Price",
        "remove": "Remove",
        "description": "Removing pool tokens converts your position back into underlying tokens at the current rate, proportional to your share of the pool. Accrued fees are included in the amounts you receive.",
        "outputMessage": "Output is estimated. If the price changes more than {slippageTolerance}% your transaction will revert.",
        "confirmTitle": "You will receive",
        "shareOfPool": "Share of pool after transaction"
    },
    "dexSettings": {
        "title": "Transaction settings",
        "marketAlgorithm": "@.upper:marketAlgorithmText",
        "marketAlgorithmTooltip": {
            "main": " - option to choose between Primary Market (TBC), Secondary Market (XYK) or a combined smart algorithm for guaranteed best price for any given transaction."
        },
        "slippageTolerance": "SLIPPAGE TOLERANCE",
        "slippageToleranceHint": "Your transaction will revert if the price changes unfavorably by more than this percentage.",
        "slippageToleranceValidation": {
            "warning": "Your transaction may fail",
            "frontrun": "Your transaction may be frontrun",
            "error": "Enter a valid slippage percentage"
        },
        "custom": "CUSTOM",
        "transactionDeadline": "TRANSACTION DEADLINE",
        "transactionDeadlineHint": "Transaction will be cancelled if it is pending for more than this long.",
        "nodeAddress": "NODE ADDRESS",
        "ip": "IP",
        "port": "PORT",
        "min": "MIN",
        "marketAlgorithms": {
            "SMART": "<span class=\"algorithm\">SMART<\/span> liquidity routing ensures the best price for any transaction by combining only the best price options from all available markets. When available, Token Bonding Curve (<span class=\"algorithm\">TBC<\/span>) will be used for liquidity as long as the asset price is more affordable than from other sources, upon which the <span class=\"algorithm\">XYK<\/span> pool is utilized.",
            "TBC": "<span class=\"algorithm\">TBC<\/span> â€” buying only from the Token Bonding Curve (Primary Market). There is a possibility that the price can become unfavorable compared to the <span class=\"algorithm\">XYK<\/span> pool (Secondary Market), but the value received from the vested rewards might turn out to be much more favorable over time.",
            "XYK": "<span class=\"algorithm\">XYK<\/span> â€” buying only from the XYK Pool (Secondary Market). Traditional XYK pool swap."
        }
    },
    "resultDialog": {
        "title": "Transaction submitted",
        "ok": "OK"
    },
    "rewards": {
        "title": "Claim Rewards",
        "changeAccount": "@:changeAccountText",
        "connected": "@:connectedText",
        "networkFee": "@:networkFeeText",
        "networkFeeTooltip": "@:networkFeeTooltipText",
        "andText": "and",
        "claiming": {
            "pending": "Claiming...",
            "success": "Claimed successfully"
        },
        "transactions": {
            "confimation": "Confirm {order} of {total} transactions...",
            "success": "You will receive your rewards shortly",
            "failed": "{order} of {total} transactions failed. @:retryText"
        },
        "signing": {
            "extension": "polkadot{.js} browser extension",
            "accounts": "your @:soraText and @:ethereumText accounts respectively"
        },
        "hint": {
            "connectExternalAccount": "Connect an @:ethereumText account to check for available PSWAP and VAL rewards.",
            "connectAccounts": "To claim your PSWAP and VAL rewards you need to connect both your @:soraText and @:ethereumText accounts.",
            "connectAnotherAccount": "Connect another @:ethereumText account to check for available PSWAP and VAL rewards.",
            "howToClaimRewards": "To claim your {symbols} rewards you need to sign {count} {transactions} in {destination}. Rewards will be deposited to your @:soraText account."
        },
        "action": {
            "connectWallet": "@:connectWalletText",
            "connectExternalWallet": "Connect @:ethereumText account",
            "signAndClaim": "Sign and claim",
            "pendingInternal": "@:soraText transaction pending...",
            "pendingExternal": "@:ethereumText transaction pending...",
            "retry": "@:retryText",
            "checkRewards": "Check",
            "insufficientBalance": "@:insufficientBalanceText"
        },
        "notification": {
            "empty": "No available claims for this account"
        },
        "events": {
            "XorErc20": "XOR ERC-20",
            "SoraFarmHarvest": "@:(soraText).farm harvest",
            "NtfAirdrop": "NFT Airdrop",
            "LiquidityProvision": "Fees gained from liquidity provision",
            "BuyOnBondingCurve": "buying from the TBC",
            "NftAirdrop": "NFT Airdrop",
            "MarketMakerVolume": "Market Making",
            "LiquidityProvisionFarming": "Farming"
        },
        "vested": "vested",
        "forText": "for",
        "totalVested": "Total rewards",
        "claimableAmountDoneVesting": "Claimable rewards",
        "groups": {
            "strategic": "Strategic Rewards",
            "external": "Rewards for the connected ethereum account"
        }
    },
    "provider": {
        "default": "@:ethereumText provider",
        "metamask": "@:metamask",
        "messages": {
            "checkExtension": "{name} extension is busy, please check it",
            "extensionLogin": "Please login to your {name} extension",
            "installExtension": "{name} extension is not found. Please install it!\n\nAlready installed extension? Please reload the page",
            "reloadPage": "Reload page"
        }
    },
    "selectLanguageDialog": {
        "title": "Language"
    },
    "tokens": {
        "title": "Listed Tokens",
        "symbol": "Symbol",
        "name": "Name",
        "assetId": "Asset ID"
    },
    "memorandum": "Polkaswap Memorandum and Terms of Services",
    "memorandumLink": "<a href=\"@:helpDialog.termsOfServiceLink\" target=\"_blank\" rel=\"nofollow noopener\" class=\"link\" title=\"@:memorandum\">@:memorandum<\/a>",
    "privacyLink": "<a href=\"@:helpDialog.privacyPolicyLink\" target=\"_blank\" rel=\"nofollow noopener\" class=\"link\" title=\"@:helpDialog.privacyPolicy\">@:helpDialog.privacyPolicy<\/a>",
    "FAQ": "Polkaswap FAQ",
    "connectedAccount": "Connected account",
    "selectNodeConnected": "Connected to: {chain}",
    "moonpayText": "MoonPay",
    "forText": "for",
    "moonpay": {
        "notifications": {
            "success": {
                "title": "Tokens purchased",
                "text": "Token purchase is finished. The HASHI bridge transaction will start automatically as soon as the tokens have been received in the connected Ethereum account. It is safe to close this window and continue using Polkaswap. There will be a notification about the bridge transaction when ready."
            },
            "supportError": {
                "title": "Token not supported",
                "text": "Unfortunately the token purchased via @:moonpayText is not yet supported by the HASHI bridge in Polkaswap. Normally only the supported tokens should be available for purchase via MoonPay in Polkaswap, hence something must have gone wrong somewhere. Please donâ€™t hesitate to let the community know about this case in the <a class=\"link\" href=\"https:\/\/t.me\/polkaswap\" target=\"_blank\" rel=\"nofollow noopener\" title=\"@:appName\">Polkaswap Telegram group<\/a>."
            },
            "feeError": {
                "title": "Not enough ETH for the bridge tx",
                "text": "Unfortunately the HASHI bridge transaction has failed due to there not being enough ETH to pay for the Ethereum network transation fees. Please add more ETH and try again."
            },
            "transactionError": {
                "title": "Transaction has failed",
                "text": "Unfortunately it appears that the @:moonpayText transaction has failed. Please try again. For @:moonpayText support go to <a class=\"link\" href=\"https:\/\/support.moonpay.com\" target=\"_blank\" rel=\"nofollow noopener\" title=\"@:moonpayText\">https:\/\/support.moonpay.com<\/a>"
            },
            "amountError": {
                "title": "Insufficient balance",
                "text": "Unfortunately the HASHI bridge transaction has failed due to there not being enough tokens for transaction. Please check your Ethereum account balance and try again."
            },
            "accountAddressError": {
                "title": "Wrong Ethereum account",
                "text": "Unfortunately, the HASHI bridge transaction failed due to the recipient address of the tokens in the @:moonpayText order does not match your current Ethereum account address. Please switch Ethereum account in extension and try again."
            }
        },
        "buttons": {
            "buy": "Buy Tokens",
            "history": "Tx History",
            "transfer": "Start bridge",
            "view": "View transaction"
        },
        "history": {
            "title": "Purchase history",
            "empty": "No data"
        },
        "confirmations": {
            "txReady": "Transaction Ready For Bridge"
        }
    }
}