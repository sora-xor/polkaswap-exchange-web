var D=Object.defineProperty;var A=(u,e,t)=>e in u?D(u,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[e]=t;var s=(u,e,t)=>A(u,typeof e!="symbol"?e+"":e,t);import{m as V,$ as g,a5 as C,b as n,gw as B,gA as P,X as F,am as E,ak as L,aj as q,ai as R,Y as b,a3 as N,g as f,h as m,i as h,k as w,W as y,C as O,l as c,j as p,_ as k,n as W}from"./index-BHqySXo4.js";import{C as M}from"./ConfirmDialogMixin-BYoYOPfg.js";import{S as Z}from"./SwapAmountsMixin-CSyMayo5.js";import{T as Q}from"./TokenSelectMixin-B1fkEMyI.js";import{c as X,D as $,g as j}from"./swap-CnGlujmL.js";var z=Object.defineProperty,K=Object.getOwnPropertyDescriptor,o=(u,e,t,a)=>{for(var r=a>1?void 0:a?K(e,t):e,l=u.length-1,d;l>=0;l--)(d=u[l])&&(r=(a?d(e,t,r):d(r))||r);return a&&r&&z(e,t,r),r};let i=class extends V(g.FormattedAmountMixin,g.TransactionMixin,Q,M,C,Z){constructor(){super(...arguments);s(this,"networkFees");s(this,"isExchangeB");s(this,"isAvailable");s(this,"swapQuote");s(this,"allowLossPopup");s(this,"selectedDexId");s(this,"slippageTolerance");s(this,"xor");s(this,"liquiditySource");s(this,"nodeIsConnected");s(this,"debugEnabled");s(this,"swapMarketAlgorithm");s(this,"setAmountWithoutImpact");s(this,"setExchangeB");s(this,"setLiquidityProviderFee");s(this,"setRewards");s(this,"setRoute");s(this,"setDistribution");s(this,"selectDexId");s(this,"setSubscriptionPayload");s(this,"switchTokens");s(this,"reset");s(this,"resetBalanceSubscriptions");s(this,"updateBalanceSubscriptions");s(this,"delimiters",n.FPNumber.DELIMITERS_CONFIG);s(this,"KnownSymbols",B);s(this,"isTokenFromSelected",!1);s(this,"showSettings",!1);s(this,"showSelectTokenDialog",!1);s(this,"lossWarningVisibility",!1);s(this,"quoteSubscription",null);s(this,"quoteLoading",!1);s(this,"recountSwapValues",P(this.runRecountSwapValues,100))}handleLiquiditySourceChange(){this.runRecountSwapValues()}updateConnectionSubsriptions(e){e?this.enableSwapSubscriptions():this.resetSwapSubscriptions()}get xorSymbol(){return" "+F.symbol}get networkFeeFormatted(){return this.formatCodecNumber(this.networkFee)}get tokenFromSymbol(){var e;return((e=this.tokenFrom)==null?void 0:e.symbol)??""}get fromFiatAmount(){return this.tokenFrom&&this.fromValue?this.getFPNumberFiatAmountByFPNumber(new n.FPNumber(this.fromValue),this.tokenFrom)??n.FPNumber.ZERO:n.FPNumber.ZERO}get toFiatAmount(){return this.tokenTo&&this.toValue?this.getFPNumberFiatAmountByFPNumber(new n.FPNumber(this.toValue),this.tokenTo)??n.FPNumber.ZERO:n.FPNumber.ZERO}get fiatDifference(){return X(this.fromFiatAmount,this.toFiatAmount).toFixed(2)}get fiatDifferenceFormatted(){return this.formatStringValue(this.fiatDifference)}get isErrorFiatDifferenceStatus(){const e=Number(this.fiatDifference),t=Number.isFinite(e)?e:0;return j(t)===$.Error}get isXorOutputSwap(){var e;return((e=this.tokenTo)==null?void 0:e.address)===F.address}get isMaxSwapAvailable(){return this.preparedForSwap?E(this.tokenFrom,this.fromValue,this.networkFee,this.xor,this.isXorOutputSwap):!1}get preparedForSwap(){return this.isLoggedIn&&this.areTokensSelected}get isInsufficientLiquidity(){return this.isAvailable&&this.preparedForSwap&&!this.areZeroAmounts&&this.hasZeroAmount}get isInsufficientBalance(){return this.tokenFrom?this.preparedForSwap&&L(this.tokenFrom,this.fromValue,this.networkFee):!1}get isInsufficientXorForFee(){var l;const e=this.preparedForSwap&&q(this.xor,this.networkFee,this.isXorOutputSwap);if(e||!this.isXorOutputSwap)return e;const t=this.getFPNumberFromCodec(((l=this.xor.balance)==null?void 0:l.transferable)??"0",this.xor.decimals),a=this.getFPNumberFromCodec(this.networkFee,this.xor.decimals).sub(t),r=this.getFPNumber(this.toValue,this.xor.decimals).sub(n.FPNumber.gt(a,this.Zero)?a:this.Zero);return n.FPNumber.lte(r,this.Zero)}get networkFee(){return this.networkFees[n.Operation.Swap]}get isConfirmSwapDisabled(){return!this.areTokensSelected||!this.isAvailable||this.areZeroAmounts||this.isInsufficientLiquidity||this.isInsufficientBalance||this.isInsufficientXorForFee}created(){this.withApi(async()=>{await n.api.swap.update(),this.enableSwapSubscriptions()})}getTokenBalance(e){return R(e)}resetFieldFrom(){this.setFromValue("")}resetFieldTo(){this.setToValue("")}handleInputFieldFrom(e){(!this.areTokensSelected||b(e))&&this.resetFieldTo(),e!==this.fromValue&&(this.setFromValue(e),this.recountSwapValues())}handleInputFieldTo(e){(!this.areTokensSelected||b(e))&&this.resetFieldFrom(),e!==this.toValue&&(this.setToValue(e),this.recountSwapValues())}async runRecountSwapValues(){const e=this.isExchangeB?this.toValue:this.fromValue;if(!this.areTokensSelected||b(e)||!this.swapQuote){this.setAmountWithoutImpact(),this.setLiquidityProviderFee(),this.setRewards(),this.setRoute(),this.setDistribution(),this.selectDexId();return}const t=this.isExchangeB?this.setFromValue:this.setToValue,a=this.isExchangeB?this.resetFieldFrom:this.resetFieldTo,r=this.isExchangeB?this.tokenFrom:this.tokenTo;try{const{dexId:l,result:{amount:d,amountWithoutImpact:T,fee:x,rewards:v,route:_,distribution:I}}=this.swapQuote(this.tokenFrom.address,this.tokenTo.address,e,this.isExchangeB,[this.liquiditySource].filter(Boolean));if(this.debugEnabled){const S=await n.api.swap.getResultRpc(this.tokenFrom.address,this.tokenTo.address,e,this.isExchangeB,this.liquiditySource??void 0);console.table({frontend:d,backend:S.amount,difference:+d-+S.amount})}t(this.getStringFromCodec(d,r.decimals)),this.setAmountWithoutImpact(T),this.setLiquidityProviderFee(x),this.setRewards(v),this.setRoute(_),this.setDistribution(I),this.selectDexId(l)}catch(l){console.error(l),a()}}resetQuoteSubscription(){var e;(e=this.quoteSubscription)==null||e.unsubscribe(),this.quoteSubscription=null}async subscribeOnQuote(){if(this.resetQuoteSubscription(),!this.areTokensSelected)return;this.quoteLoading=!0;const e=n.api.swap.getDexesSwapQuoteObservable(this.tokenFrom.address,this.tokenTo.address);e?this.quoteSubscription=e.subscribe(t=>{this.setSubscriptionPayload(t),this.runRecountSwapValues(),this.quoteLoading=!1}):this.setSubscriptionPayload()}handleFocusField(e=!1){const t=e?this.isZeroToAmount:this.isZeroFromAmount,a=this.isExchangeB;this.setExchangeB(e),t&&(this.resetFieldFrom(),this.resetFieldTo()),a!==this.isExchangeB&&this.recountSwapValues()}async handleSwitchTokens(){this.areTokensSelected&&(await this.switchTokens(),this.runRecountSwapValues())}handleMaxValue(){if(!this.tokenFrom)return;this.setExchangeB(!1);const e=N(this.tokenFrom,this.networkFee);this.handleInputFieldFrom(e)}openSelectTokenDialog(e){this.isTokenFromSelected=e,this.showSelectTokenDialog=!0}async handleSelectToken(e){e&&await this.withSelectAssetLoading(async()=>{this.isTokenFromSelected?await this.setTokenFromAddress(e.address):await this.setTokenToAddress(e.address),this.subscribeOnQuote()})}handleSwapClick(){this.isErrorFiatDifferenceStatus&&this.allowLossPopup?this.lossWarningVisibility=!0:this.handleConfirm()}handleConfirm(){this.confirmOrExecute(this.exchangeTokens)}async exchangeTokens(){this.isConfirmSwapDisabled||await this.withNotifications(async()=>{await n.api.swap.execute(this.tokenFrom,this.tokenTo,this.fromValue,this.toValue,this.slippageTolerance,this.isExchangeB,this.liquiditySource,this.selectedDexId),this.resetFieldFrom(),this.resetFieldTo(),this.setExchangeB(!1)})}openSettingsDialog(){this.showSettings=!0}enableSwapSubscriptions(){this.updateBalanceSubscriptions(),this.subscribeOnQuote()}resetSwapSubscriptions(){this.resetBalanceSubscriptions(),this.resetQuoteSubscription()}beforeDestroy(){this.resetSwapSubscriptions()}destroyed(){this.reset()}};o([f.wallet.settings.networkFees],i.prototype,"networkFees",2);o([f.swap.isExchangeB],i.prototype,"isExchangeB",2);o([f.swap.isAvailable],i.prototype,"isAvailable",2);o([f.swap.swapQuote],i.prototype,"swapQuote",2);o([f.swap.allowLossPopup],i.prototype,"allowLossPopup",2);o([f.swap.selectedDexId],i.prototype,"selectedDexId",2);o([f.settings.slippageTolerance],i.prototype,"slippageTolerance",2);o([m.assets.xor],i.prototype,"xor",2);o([m.swap.swapLiquiditySource],i.prototype,"liquiditySource",2);o([m.settings.nodeIsConnected],i.prototype,"nodeIsConnected",2);o([m.settings.debugEnabled],i.prototype,"debugEnabled",2);o([m.swap.swapMarketAlgorithm],i.prototype,"swapMarketAlgorithm",2);o([h.swap.setAmountWithoutImpact],i.prototype,"setAmountWithoutImpact",2);o([h.swap.setExchangeB],i.prototype,"setExchangeB",2);o([h.swap.setLiquidityProviderFee],i.prototype,"setLiquidityProviderFee",2);o([h.swap.setRewards],i.prototype,"setRewards",2);o([h.swap.setRoute],i.prototype,"setRoute",2);o([h.swap.setDistribution],i.prototype,"setDistribution",2);o([h.swap.selectDexId],i.prototype,"selectDexId",2);o([h.swap.setSubscriptionPayload],i.prototype,"setSubscriptionPayload",2);o([w.swap.switchTokens],i.prototype,"switchTokens",2);o([w.swap.reset],i.prototype,"reset",2);o([w.swap.resetSubscriptions],i.prototype,"resetBalanceSubscriptions",2);o([w.swap.updateSubscriptions],i.prototype,"updateBalanceSubscriptions",2);o([y("liquiditySource")],i.prototype,"handleLiquiditySourceChange",1);o([y("nodeIsConnected")],i.prototype,"updateConnectionSubsriptions",1);i=o([O({components:{BaseWidget:c(p.BaseWidget),SwapSettings:c(p.SwapSettings),SwapConfirm:c(p.SwapConfirm),SwapStatusActionBadge:c(p.SwapStatusActionBadge),SwapTransactionDetails:c(p.SwapTransactionDetails),SwapLossWarningDialog:c(p.SwapLossWarningDialog),SlippageTolerance:c(p.SlippageTolerance),SelectToken:c(p.SelectToken),TokenInput:c(p.TokenInput),ValueStatusWrapper:c(p.ValueStatusWrapper),FormattedAmount:k.FormattedAmount,InfoLine:k.InfoLine}})],i);var G=function(){var e=this,t=e._self._c;return e._self._setupProxy,t("base-widget",e._b({staticClass:"swap-widget",attrs:{title:e.t("exchange.Swap")},scopedSlots:e._u([{key:"filters",fn:function(){return[t("swap-status-action-badge",{scopedSlots:e._u([{key:"label",fn:function(){return[e._v(e._s(e.t("marketText"))+":")]},proxy:!0},{key:"value",fn:function(){return[e._v(e._s(e.swapMarketAlgorithm))]},proxy:!0},{key:"action",fn:function(){return[t("s-button",{staticClass:"el-button--settings",attrs:{type:"action",icon:"basic-settings-24"},on:{click:e.openSettingsDialog}})]},proxy:!0}])})]},proxy:!0}])},"base-widget",e.$attrs,!1),[t("div",{staticClass:"swap-form"},[t("token-input",{attrs:{"data-test-name":"swapFrom","is-select-available":"",balance:e.getTokenBalance(e.tokenFrom),"is-max-available":e.isMaxSwapAvailable,title:e.t("transfers.from"),token:e.tokenFrom,value:e.fromValue},on:{input:e.handleInputFieldFrom,focus:function(a){return e.handleFocusField(!1)},max:e.handleMaxValue,select:function(a){return e.openSelectTokenDialog(!0)}}}),t("s-button",{staticClass:"el-button--switch-tokens",attrs:{"data-test-name":"switchToken",type:"action",icon:"arrows-swap-90-24",disabled:!e.areTokensSelected},on:{click:e.handleSwitchTokens}}),t("token-input",{attrs:{"data-test-name":"swapTo","is-select-available":"",balance:e.getTokenBalance(e.tokenTo),title:e.t("transfers.to"),token:e.tokenTo,value:e.toValue},on:{input:e.handleInputFieldTo,focus:function(a){return e.handleFocusField(!0)},select:function(a){return e.openSelectTokenDialog(!1)}},scopedSlots:e._u([e.tokenTo?{key:"fiat-amount-append",fn:function(){return[t("value-status-wrapper",{staticClass:"price-difference__value",attrs:{value:e.fiatDifference,badge:""}},[t("formatted-amount",{attrs:{value:e.fiatDifferenceFormatted}},[e._v("%")])],1)]},proxy:!0}:null],null,!0)}),t("slippage-tolerance",{staticClass:"slippage-tolerance-settings"}),e.isLoggedIn?t("s-button",{staticClass:"action-button s-typography-button--large",attrs:{"data-test-name":"confirmSwap",type:"primary",disabled:e.isConfirmSwapDisabled,loading:e.loading||e.quoteLoading||e.isSelectAssetLoading},on:{click:e.handleSwapClick}},[e.areTokensSelected?e.isAvailable?e.areZeroAmounts?[e._v(" "+e._s(e.t("buttons.enterAmount"))+" ")]:e.isInsufficientLiquidity?[e._v(" "+e._s(e.t("swap.insufficientLiquidity"))+" ")]:e.isInsufficientBalance?[e._v(" "+e._s(e.t("insufficientBalanceText",{tokenSymbol:e.tokenFromSymbol}))+" ")]:e.isInsufficientXorForFee?[e._v(" "+e._s(e.t("insufficientBalanceText",{tokenSymbol:e.KnownSymbols.XOR}))+" ")]:[e.isErrorFiatDifferenceStatus?t("s-icon",{staticClass:"action-button-icon",attrs:{name:"notifications-alert-triangle-24",size:"18"}}):e._e(),e._v(" "+e._s(e.t("exchange.Swap"))+" ")]:[e._v(" "+e._s(e.t("pairIsNotCreated"))+" ")]:[e._v(" "+e._s(e.t("buttons.chooseTokens"))+" ")]],2):t("s-button",{staticClass:"action-button s-typography-button--large",attrs:{type:"primary"},on:{click:e.connectSoraWallet}},[e._v(" "+e._s(e.t("connectWalletText"))+" ")]),t("swap-transaction-details",{staticClass:"swap-details",attrs:{disabled:!e.areTokensSelected||e.hasZeroAmount},scopedSlots:e._u([{key:"reference",fn:function(){return[t("info-line",{staticClass:"swap-details-info-line",attrs:{label:e.t("networkFeeText"),"label-tooltip":e.t("networkFeeTooltipText"),value:e.networkFeeFormatted,"asset-symbol":e.xorSymbol,"fiat-value":e.getFiatAmountByCodecString(e.networkFee),"is-formatted":""}})]},proxy:!0}])}),t("select-token",{attrs:{visible:e.showSelectTokenDialog,connected:e.isLoggedIn,asset:e.isTokenFromSelected?e.tokenTo:e.tokenFrom},on:{"update:visible":function(a){e.showSelectTokenDialog=a},select:e.handleSelectToken}}),t("swap-loss-warning-dialog",{attrs:{visible:e.lossWarningVisibility,value:e.fiatDifferenceFormatted},on:{"update:visible":function(a){e.lossWarningVisibility=a},confirm:e.handleConfirm}}),t("swap-confirm",{attrs:{visible:e.confirmDialogVisibility,"is-insufficient-balance":e.isInsufficientBalance},on:{"update:visible":function(a){e.confirmDialogVisibility=a},confirm:e.exchangeTokens}}),t("swap-settings",{attrs:{visible:e.showSettings},on:{"update:visible":function(a){e.showSettings=a}}})],1)])},H=[],Y=W(i,G,H,!1,null,"c0a576bf");const oe=Y.exports;export{oe as default};
