var I=Object.defineProperty;var v=(n,t,e)=>t in n?I(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e;var o=(n,t,e)=>v(n,typeof t!="symbol"?t+"":t,e);import{m as D,B as N,Q as y,a1 as M,a2 as F,a3 as C,b as B,g as m,h as u,i as g,k as T,C as H}from"./index-BHqySXo4.js";import{B as V}from"./BridgeHistoryMixin-G3tlRVUy.js";import{W as K}from"./WalletConnectMixin-CatA0t7p.js";import{M as d}from"./consts-Bf-kzBRE.js";var O=Object.defineProperty,_=Object.getOwnPropertyDescriptor,s=(n,t,e,r)=>{for(var i=r>1?void 0:r?_(t,e):t,c=n.length-1,p;c>=0;c--)(p=n[c])&&(i=(r?p(t,e,i):p(i))||i);return r&&i&&O(t,e,i),i};const h=(n,t)=>{const e=new Error(n);return e.name=t,e};let a=class extends D(V,K){constructor(){super(...arguments);o(this,"moonpayApi");o(this,"bridgeTransactionData");o(this,"ethBridgeEvmNetwork");o(this,"soraNetwork");o(this,"registeredAssets");o(this,"moonpayApiKey");o(this,"getAsset");o(this,"contractAddress");o(this,"setConfirmationVisibility");o(this,"setNotificationVisibility");o(this,"setNotificationKey");o(this,"setBridgeTxData");o(this,"selectExternalNetwork");o(this,"getTransactionTranserData")}async prepareEvmNetwork(){await this.selectExternalNetwork({id:this.ethBridgeEvmNetwork,type:N.Eth})}initMoonpayApi(){this.moonpayApi.publicKey=this.moonpayApiKey,this.moonpayApi.soraNetwork=this.soraNetwork??""}async prepareMoonpayTxForBridgeTransfer(t,e=!1){try{const r=await this.prepareBridgeHistoryItemData(t);this.setBridgeTxData({data:r,startBridgeButtonVisibility:e}),this.setNotificationVisibility(!1),this.setConfirmationVisibility(!0)}catch(r){await this.handleBridgeInitError(r)}}async getBridgeMoonpayTransaction(){if(!this.bridgeTransactionData)throw new Error("bridgeTransactionData is empty");this.updateInternalHistory();const t=this.getBridgeHistoryItemByMoonpayId(this.bridgeTransactionData.payload.moonpayId);return t||await this.generateHistoryItem(this.bridgeTransactionData)}getBridgeHistoryItemByMoonpayId(t){var r;const e=(r=this.moonpayApi.accountRecords)==null?void 0:r[t];return e?Object.values(this.history).find(i=>i.externalHash===e):null}async startBridgeForMoonpayTransaction(){const t=await this.getBridgeMoonpayTransaction();await this.showHistory(t.id),this.setBridgeTxData()}async prepareBridgeHistoryItemData(t){return await this.withLoading(async()=>{await this.prepareEvmNetwork();const e=await this.getTransactionTranserData(t.cryptoTransactionId);if(!e)throw h(`Cannot fetch transaction data: ${t.cryptoTransactionId}`,d.TransactionError);if(!await y.checkAccountIsConnected(e.to))throw h(`Account for transfer is not connected: ${e.to}`,d.AccountAddressError);const[i,c]=Object.entries(this.registeredAssets).find(([P,k])=>y.addressesAreEqual(k.address,e.address))??[];if(!(i&&c))throw h(`Asset is not registered: ethereum address ${e.address}`,d.SupportError);const p=y.isNativeEvmTokenAddress(c.address),E=await y.getAccountAssetBalance(e.to,c.address),A=this.getAsset(i),l=await M(A,c.kind,this.contractAddress,e.amount,!1,this.soraAddress,e.to),b=await y.getAccountBalance(e.to);if(!!F(b,l))throw h("Insufficient ETH for fee",d.FeeError);const w={...A,balance:{},externalBalance:E},x=C(w,l,{isExternalBalance:!0,isExternalNative:p}),f=Math.min(Number(x),Number(e.amount));if(f<=0)throw h("Insufficient amount",d.AmountError);return{type:B.Operation.EthBridgeIncoming,amount:String(f),amount2:String(f),symbol:w.symbol,assetAddress:w.address,soraNetworkFee:this.networkFees[B.Operation.EthBridgeIncoming],externalNetworkFee:l,externalNetwork:this.ethBridgeEvmNetwork,externalNetworkType:N.Eth,to:e.to,payload:{moonpayId:t.id}}})}async showNotification(t){this.setNotificationKey(t),this.setNotificationVisibility(!0)}async handleBridgeInitError(t){Object.values(d).includes(t.name)?await this.showNotification(t.name):console.error(t)}};s([m.moonpay.api],a.prototype,"moonpayApi",2);s([m.moonpay.bridgeTransactionData],a.prototype,"bridgeTransactionData",2);s([m.web3.ethBridgeEvmNetwork],a.prototype,"ethBridgeEvmNetwork",2);s([m.wallet.settings.soraNetwork],a.prototype,"soraNetwork",2);s([m.assets.registeredAssets],a.prototype,"registeredAssets",2);s([u.settings.moonpayApiKey],a.prototype,"moonpayApiKey",2);s([u.assets.assetDataByAddress],a.prototype,"getAsset",2);s([u.web3.contractAddress],a.prototype,"contractAddress",2);s([g.moonpay.setConfirmationVisibility],a.prototype,"setConfirmationVisibility",2);s([g.moonpay.setNotificationVisibility],a.prototype,"setNotificationVisibility",2);s([g.moonpay.setNotificationKey],a.prototype,"setNotificationKey",2);s([g.moonpay.setBridgeTxData],a.prototype,"setBridgeTxData",2);s([T.web3.selectExternalNetwork],a.prototype,"selectExternalNetwork",2);s([T.moonpay.getTransactionTranserData],a.prototype,"getTransactionTranserData",2);a=s([H],a);export{a as M};
