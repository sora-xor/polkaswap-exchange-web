var m=Object.defineProperty;var B=(s,e,i)=>e in s?m(s,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):s[e]=i;var o=(s,e,i)=>B(s,typeof e!="symbol"?e+"":e,i);import{m as y,$ as h,gB as _,k as p,i as d,h as u,g as S,W as g,C as w,_ as f,l as b,j as x,n as C}from"./index-BHqySXo4.js";import{S as A}from"./SubscriptionsMixin-D6BOGEEX.js";import{W as k}from"./WalletConnectMixin-CatA0t7p.js";var v=Object.defineProperty,D=Object.getOwnPropertyDescriptor,r=(s,e,i,n)=>{for(var a=n>1?void 0:n?D(e,i):e,c=s.length-1,l;c>=0;c--)(l=s[c])&&(a=(n?l(e,i,a):l(a))||a);return n&&a&&v(e,i,a),a};let t=class extends y(h.LoadingMixin,k,A){constructor(){super(...arguments);o(this,"getSupportedApps");o(this,"restoreSelectedNetwork");o(this,"updateExternalBalance");o(this,"subscribeOnBlockUpdates");o(this,"updateOutgoingMaxLimit");o(this,"resetBridgeForm");o(this,"resetBlockUpdatesSubscription");o(this,"resetOutgoingMaxLimitSubscription");o(this,"selectedNetwork");o(this,"externalAccount");o(this,"subAccount");o(this,"subBridgeConnector");o(this,"isSignTxDialogVisible");o(this,"setSignTxDialogVisibility");o(this,"trackLogin",!1)}get chainApi(){return this.subBridgeConnector.accountApi}onSelectedNetworkChange(i,n){i&&n&&!_(i)(n)&&this.resetBridgeForm()}onExternalAccountChange(){this.updateExternalBalance()}async created(){this.setStartSubscriptions([this.subscribeOnBlockUpdates,this.updateOutgoingMaxLimit,this.updateBridgeApps]),this.setResetSubscriptions([this.resetBlockUpdatesSubscription,this.resetOutgoingMaxLimitSubscription])}beforeDestroy(){this.disconnectExternalNetwork()}async updateBridgeApps(){await this.getSupportedApps(),this.restoreSelectedNetwork()}};r([p.web3.getSupportedApps],t.prototype,"getSupportedApps",2);r([p.web3.restoreSelectedNetwork],t.prototype,"restoreSelectedNetwork",2);r([p.bridge.updateExternalBalance],t.prototype,"updateExternalBalance",2);r([p.bridge.subscribeOnBlockUpdates],t.prototype,"subscribeOnBlockUpdates",2);r([p.bridge.updateOutgoingMaxLimit],t.prototype,"updateOutgoingMaxLimit",2);r([p.bridge.resetBridgeForm],t.prototype,"resetBridgeForm",2);r([d.bridge.resetBlockUpdatesSubscription],t.prototype,"resetBlockUpdatesSubscription",2);r([d.bridge.resetOutgoingMaxLimitSubscription],t.prototype,"resetOutgoingMaxLimitSubscription",2);r([u.web3.selectedNetwork],t.prototype,"selectedNetwork",2);r([u.bridge.externalAccount],t.prototype,"externalAccount",2);r([u.web3.subAccount],t.prototype,"subAccount",2);r([S.bridge.subBridgeConnector],t.prototype,"subBridgeConnector",2);r([S.bridge.isSignTxDialogVisible],t.prototype,"isSignTxDialogVisible",2);r([d.bridge.setSignTxDialogVisibility],t.prototype,"setSignTxDialogVisibility",2);r([g("selectedNetwork")],t.prototype,"onSelectedNetworkChange",1);r([g("soraAddress"),g("externalAccount")],t.prototype,"onExternalAccountChange",1);t=r([w({components:{ConfirmDialog:f.ConfirmDialog,BridgeSelectNetwork:b(x.BridgeSelectNetwork),SelectProviderDialog:b(x.SelectProviderDialog)}})],t);var O=function(){var e=this,i=e._self._c;return e._self._setupProxy,i("div",{staticClass:"bridge-container"},[i("router-view",e._g(e._b({},"router-view",{parentLoading:e.subscriptionsDataLoading,...e.$attrs},!1),e.$listeners)),i("confirm-dialog",{attrs:{"chain-api":e.chainApi,account:e.subAccount,visibility:e.isSignTxDialogVisible,"set-visibility":e.setSignTxDialogVisibility}}),i("bridge-select-network"),i("select-provider-dialog")],1)},N=[],L=C(t,O,N,!1,null,null);const P=L.exports;export{P as default};
